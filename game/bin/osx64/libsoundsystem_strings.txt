			Beat:	%float
			Sequence:	%short
		End Beat: %float
		Instrument: %short
		loops: %short
	 dspmix %1.2f : distmix %1.2f : lvol %1.2f : cvol %1.2f : rvol %1.2f : rlvol %1.2f : rrvol %1.2f
	 long long: %4f unsigned long long: %4f ...: %4f
	DSP: %float
	LVL: %float
	MUTE: %float
	Refs %16s : Name (Locks)
	SOLO: %float
	Track: %short
	VOL: %float
	You must construct it with ORDERED_CONSTRUCT macro in the dependency resolution function.
	[%2d] %16.16s : %short (%double)
	fffff.
     
      
        
         
          
                
                                  
   PP0
  %double: %short (%08lx :: %08lx)
  0  
  0   P@ 
  P0 
 - %double / %double allocated
 - Cluster[%double]@%8p = '%short' (type %double)
 0 00 0
 : %short : vol: %4.2f, sndlvl: %4.2f 
 @@@@@@
 E;~@|
 ReadToken overflow
 [A\A^A_]
 [A^]
 ffff.
 fffff.
!	@yv
!"Allowing insert of dupe without explicit dupe insertion. Fix code callpoint to allow dupes."
!"CUtlMemoryPoolBase::AddNewBlob: mode == UTLMEMORYPOOL_GROW_NONE"
!"CUtlMemoryPoolBase::Alloc: ran out of memory"
!"Not Implemented"
!"S_PrecacheSound:  Failed to create sfx"
!( m_nFlags & FCVAR_NEVER_AS_STRING )
!0p(`
!IsReadOnly()
!IsRelevantFieldType( pFieldType )
!IsSingleFieldRestricted()
!bCreate
!fffff.
!g_pPresetList
!g_pSchemaSystem || g_pSchemaSystem == pSchemaSystem
!g_pSoundServices
!m_bCacheLock
!m_bInitialized
!m_bLoaded
!m_bStoredSubKey
!m_hAsyncControl
!m_pMemPool
!m_pPrevious
!m_vEntryMatchList[int].m_bFree
!m_vmix.IsValid()
!multilist || ML
!node->IsLeafNode()
!pSfx->m_bManifestLoadFailed && !pSfx->m_bManifestLoadAttempted
!params.m_pVMixVoice
!voiceState.m_bHasVMix
!voiceState.m_bReadLevel
"ffff.
#OS_Default_Device
#base
#base is NULL 
#fff.
#ffffff.
#include
#include is NULL 
$HcAx9
$ffff.
%*sName: %short
%*sNameSpace: %short
%*sOperator Stack: %short
%*sSize: %int
%*sSoundEvent Hash: %double
%*short%s.%short: 
%*short(%08x):Pausing: %short (%08x) : elapsed time: %.fs
%*short(%08x):Stopping: %short (%08x) : elapsed time: %.fs
%*smixgroup: %short
%dOffset: %int
%double) %short
%fffff.
%float Async I/O Bumped priority for %short (%8.2f msec)
%float: %float : %float : %float : %float
%int %int %int %int
%s.%short
%s_KV3
%short %short
%short : %p
%short : %short
%short = %float
%short = %short: %int : %int : %int : %int : %int
%short Operator Fields: %int
%short allocation count overflow
%short allocation count overflow( %llu > %llu )
%short allocation count overflow( %llu >= %llu )
%short control parameter Not Implemented
%short references : 
%short set to %.2f
%short set to %long long (%short)
%short unable to allocate %u bytes
%short%short 
%short%short%float
%short%short%int
%short%short%llu
%short%short%short
%short%short%u
%short(%double): Channel does not have signed char mixer for sound '%short'.
%short(%double): Could not pick channel for sound '%short'.
%short(%double): params.pSfx is NULL.
%short, UNKNOWN %int
%short: %float
%short: %short
%short: %short (%int : %int)
%short: Has signed char failed library stack message.
%short: Has signed char failed sound event message.
%short: Sound event executionlist has exceeded MAX_VOICES. Index %int : %short
%short: string format requested %double chars
%short:%int
%short:%short: 
%short::%short
%short::Execute: Can'unsigned short find operator stack %short in %short
&YA1H
&YA1L
&ffffff.
'":+;
'Iou	
'IouC
'fff.
( g_pSchemaSystem == NULL ) || (s_pSchemaBinding != NULL)
( nOffset % DECODE_BUFFER_SIZE ) == 0
( nOutput + (uint)int ) < mixSetup.m_nMixBufferMax
(%db) %6i : %short
(%short) %double
(%short:%short) 
(*%short*), 
(*pMessage)->m_fieldData.IsEmpty()
(GetChar()) == (0)
(Ic@PI
(None)
(Unknown)
([A\A]A^A_]
([A^A_]
(connected: %short %int )
(fff.
(intptr_t)pNode % TSLIST_NODE_ALIGNMENT == 0
(m_nAllocatedFlags & 0x8000000000000000) == 0
(m_nEntityIndex.GetRaw() > 0) && (m_nEntityIndex.GetRaw() <= g_UsedEntIndices.GetNumBits()) && g_UsedEntIndices.IsBitSet( m_nEntityIndex.GetRaw() - 1 )
(m_nRefCount & (uint32)(INTERNAL_IS_CONSTRUCTED | INTERNAL_CONSTRUCTOR_ALLOWED)) == (uint32)INTERNAL_CONSTRUCTOR_ALLOWED
(m_nRefCount & (uint32)INTERNAL_REFCOUNT_MASK) > 0
(m_nRefCount & INTERNAL_LOCKED) != 0
(nBytes % 4) == 0
(nNewIndex.GetRaw() > 0) && (nNewIndex.GetRaw() <= g_UsedEntIndices.GetNumBits())
(nSectionCount * 4) == nFloatCount
(null)
(s_pThisModuleBindingPointer != NULL)
(static_cast<CONTAINER_TYPE *>(pPushNode)->*LINKED_LIST_PTR) == nullptr
(uEHcK
)D' C
)D'0C
)D'@C
)DE0H
)TE A
)fff.
)ffff.
)fffff.
)ffffff.
*** ConCommand "%short" (%p) was not unregistered! Shutdown crash imminent!
*** ConVar "%short" was not unregistered! Shutdown crash imminent!
*SoundEvent Data*
*fff.
*ffff.
*fffff.
*pCurrentFormat == pStep->m_FromFormat
*pCurrentFormat == toFormat
+C$Lc
+G$Hc
+H$Hc
+H$Lc
+K$Hc
+NdHc
+fff.
+ffff.
+ffffff.
,D$<L
,ffff.
,fffff.
- Additional Cluster %double:
- Embedded Cluster:
---empty---
---invalid event---
-arrangements_file
-arrangments_file
-debugsoundqueue
-fff.
-ffffff.
-nosound
-playtest
-samplers_file
-sequences_file
-sse2
-sse3
-sse4
-tools
.@Tse
.CXrZ
.D$@rC
.ETv*H
.Elv*H
.FTr$1
.FTv>1
.K,vZL
.VPsP
.[(rE
.vsnd
/System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox
/System/Library/Frameworks/Carbon.framework/Versions/A/Carbon
/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation
/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation
/Users/buildbot/buildslave/dota_staging_osx64/build/src/_generated_code/soundsystem/release/osx64/isoundopsystemedit_h_schema.gen_cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/_generated_code/soundsystem/release/osx64/soundeventscriptschema_h_schema.gen_cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/_generated_code/soundsystem/release/osx64/soundstackscriptschema_h_schema.gen_cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/interfaces/interfaces.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/kv3lib/keyvalues3.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/kv3lib/keyvalues3_textreader.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/kv3lib/keyvalues3_textwriter.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/kv3lib/kv3format_manager.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/mathlib/mathlib_base.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/bitvec.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/kv3lib/keyvalues3.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/ordered_constructor.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/resourcefile/introspectedtypemanager.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/resourcefile/kv3typemanager.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/resourcefile/resourcestream.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/resourcesystem/iresourcesystem.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/resourcesystem/resourcehandle.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/resourcesystem/resourcesystemhelpers.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/resourcesystem/stronghandle.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/resourcesystem/weakhandle.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/schemalib/schemaclassinfo.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/schemalib/schemadatatraversal.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/schemasystem/schema.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/soundsystem/audio_mix.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/soundsystem/isoundopsystem.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/soundsystem/lowlevel.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/soundsystem/soundopshared.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/tier0/tsfastpushqueue.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/tier0/tslist.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/tier0/vprof.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/tier1/bitbuf.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/tier1/byteswap.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/tier1/fmtstr.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/tier1/simpledatacache.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/tier1/utlbuffer.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/tier1/utlhash.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/tier1/utlleanvector.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/tier1/utllinkedlist.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/tier1/utlrbtree.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/public/tier1/utlstringmap.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/resourcefile/externalreferences.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/resourcefile/introspectedtypemanager.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/resourcefile/resourcefile.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/schemalib/schemadatatraversal.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/schemalib/schemaiterator.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/audio_stream.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/device_capture.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/lowlevel/audioprocessor.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/lowlevel/device_null.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/lowlevel/device_sdl.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/lowlevel/mix.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/mp3_miles.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_das.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_dev_common.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_dma.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_dsp.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_mix.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_mixgroups.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_edit.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_entry_match_system.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_group_system.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_block_entry.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_convar.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_delta.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_distant_dsp.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_entity_info.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_falloff.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_filters.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_iterate_merge_speakers.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_math.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_mixer.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_mixlayer.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_occlusion.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_opvar.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_pause_soundevents.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_pos_vec8.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_samplers.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_sequencer.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_sos.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_soundevent_groups.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_source_info.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_spatialize.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_start_soundevent.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_stop_soundevents.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_timers.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_tracks.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_util.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_op_vmix.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_system.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_system.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_track_system.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_vmidi_samplers.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_op_sys/sos_vmidi_sequencer.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_wave_data.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_wave_mixer.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_wave_mixer_adpcm.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_wave_mixer_mp3.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_wave_source.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/snd_wave_temp.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/soundevent.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/soundsystem.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/steamaudio_wrapper.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/utlstringtokendict.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/vmix.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/vmix.h
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/vmix_mixer.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/soundsystem/voice.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier1/bitbuf.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier1/circularbuffer.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier1/configvalue.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier1/convar.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier1/keyvalues.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier1/mempool.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier1/strtools.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier1/utlbuffer.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier1/utlmemoryarena.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier1/utlstring.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier1/utlsymbol.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier1/utltokenizer.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier2/fieldpath.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier2/schemabindings.cpp
/Users/buildbot/buildslave/dota_staging_osx64/build/src/tier2/tier2.cpp
/ffffff.
/usr/lib/libSystem.B.dylib
/usr/lib/libc++.1.dylib
/usr/lib/libiconv.2.dylib
/usr/lib/libobjc.A.dylib
0    
0 pP 0P
0.001
0.005
0.010
0.015
00000000-0000-0000-0000-000000000000
00P` 
0HcC 
0[A\A^A_]
0[A^]
0`@                      `            00                               `            00                  
0ffff.
1440.0
1ffffff.
29C |.
29K }
2CRSH
2CRSL
2IcT$
2MASH
2QESH
2_float
3,,)H
333333
33333333H
33333333I9
3[A^]
3ffff.
49K }
49S |}
5?CVMixTypeManager
6		@7	
8IcG@I
8[A\A]A^A_]
8[A^A_]
8[A^]
8fffff.
8ffffff.
8x9,7
9+C$Hc
92t H
97t-H
97t8H
9C@tZ
9G@~(H
9G@~;H
9O@~/H
9O@~5H
9S |signed char
9S |unsigned int
9w@~FH
: %short::
;BX~09
;C(void+1
;C<~>H
;X(u#
;r,tY
<!-- kv3 encoding:%short:version{%short} format:%short:version{%short} -->
<(9{ |jI
<@A9t
<INVALID>
<NULL>
<UNRESOLVED>
<invalid soundevent name>
<null>
<unknown>
<vE9t
>L97t-H
>fffff.
>q`u)
?CDynamicsAudioProcessor
?CSosEventInfoWithFieldData_t
?ISoundSequencer
?IcW@H
?[A^]
?fff?
?ffffff.
?math_curve_2d_4knot
@ erH
@00   
@0@@P
@0D94
@@@@p
@CSfxTable
@CSosOperatorGetOpVarInfo
@CThreadEvent::CThreadEvent(bool)
@CThreadEvent::Set()
@CThreadFastMutex::Lock(unsigned long long, unsigned int) volatile
@CThreadRWLock::LockForWrite()
@CThreadRWLock::UnlockWrite()
@CThreadRWLock::WaitForRead()
@CThreadSyncObject::~CThreadSyncObject()
@CUniformRandomStream::CUniformRandomStream()
@CUniformRandomStream::RandomFloat(float, float)
@CUniformRandomStream::RandomInt(int, int)
@CUniformRandomStream::SetSeed(int)
@CVProfNode::EnterScope()
@CVProfNode::ExitScope()
@CVProfNode::GetSubNode(char const*, int, char const*, int)
@ConMsg(char const*, ...)
@DevMsg(char const*, ...)
@DevWarning(char const*, ...)
@IStack_Annotation::IStack_Annotation(CCallStackMarkerBase const&)
@IStack_Annotation::~IStack_Annotation()
@LoggingSystem_Log(int, LoggingSeverity_t, Color, char const*, ...)
@LoggingSystem_Log(int, LoggingSeverity_t, LeafCodeInfo_t const&, char const*, ...)
@M96u/H
@PA+@dHc
@PA+@dLc
@V_stristr_fast(char const*, char const*)
@[A\A^A_]
@[A^]
@_AssertMsg_ConditionFailed
@_AudioServicesAddSystemSoundCompletion
@_AudioServicesCreateSystemSoundID
@_AudioServicesDisposeSystemSoundID
@_AudioServicesPlaySystemSound
@_CFRelease
@_CFStringCreateWithCString
@_CFStringGetSystemEncoding
@_CFURLCreateWithFileSystemPath
@_CMemAllocSystemInitialize
@_COM_TimestampedLog
@_CommandLine
@_GetCPUInformation
@_KeyValuesSystem
@_LOG_GENERAL
@_LoggingSystem_AddTagToChannel
@_LoggingSystem_IsChannelEnabled
@_LoggingSystem_Log
@_LoggingSystem_RegisterLoggingChannel
@_Plat_DebugPrint
@_Plat_ExitProcess
@_Plat_FloatTime
@_Plat_GetCPUFrequency
@_Plat_GetComputerName
@_Plat_GetEnv
@_Plat_GetOSType
@_Plat_GetProcAddresses
@_Plat_IsHighDPI
@_Plat_IsInDebugSessionRaw
@_Plat_LoadSDL
@_Plat_RelativeTicks
@_Plat_RequireSDL
@_Plat_ShouldCollectMiniDumpsForFatalErrors
@_Plat_UUIDFromString
@_Plat_UUIDToString
@_Plat_VirtualAlloc
@_Plat_VirtualFree
@_Plat_WindowToOsSpecificHandle
@_Plat_getwd
@_RandomFloat
@_RandomInt
@_RegisterStringToken
@_ThreadGetCurrentId
@_ThreadInterlockedExchange64
@_ThreadSleep
@_V_FixDoubleSlashes
@_V_FixSlashes
@_V_GetErrno
@_V_GetFileExtension
@_V_ParseToken
@_V_SetErrno
@_V_TokenWaiting
@_V_UTF16ToUTF8
@_V_UTF32ToUTF8
@_V_UTF8ToUTF32
@_V_acosf
@_V_asinf
@_V_atan2f
@_V_atanf
@_V_atod
@_V_atof
@_V_atoi
@_V_atoi64
@_V_atoui64
@_V_cosf
@_V_coshf
@_V_expf
@_V_fmodf
@_V_frexpf
@_V_log10f
@_V_logf
@_V_powf
@_V_pretifymem
@_V_qsort
@_V_qsort_s
@_V_sinf
@_V_sinhf
@_V_snprintf
@_V_sscanf
@_V_stricmp_fast
@_V_strlower_fast
@_V_strtod
@_V_strtoi64
@_V_strtok
@_V_strtoui64
@_V_tan
@_V_tanf
@_V_tanhf
@_V_vsnprintf
@_V_vsnprintfRet
@_V_vsnprintfSize
@_Warning
@__Unwind_Resume
@__V_DefaultExtension
@__V_ExtractFileExtension
@__V_SetExtension
@__V_StripExtension
@__V_strncat
@__V_strncpy
@__V_strnicmp_fast
@__V_wcsncpy_bytes
@___bzero
@___cxa_atexit
@___cxa_begin_catch
@___cxa_call_unexpected
@___cxa_guard_abort
@___cxa_guard_acquire
@___cxa_guard_release
@___cxa_pure_virtual
@___gxx_personality_v0
@___stack_chk_fail
@___stack_chk_guard
@___tolower
@__float128 short::*
@_ceilf
@_floor
@_floorf
@_g_Tier1_BitWriteMasks
@_g_VProfCurrentProfile
@_g_pMemAlloc
@_g_pScheduledFunctions
@_kCFAllocatorDefault
@_memchr
@_memcmp
@_memcpy
@_memmove
@_memset
@_memset_pattern16
@_pthread_mutex_destroy
@_pthread_mutex_init
@_pthread_mutex_lock
@_pthread_mutex_unlock
@_pthread_mutexattr_init
@_pthread_mutexattr_settype
@_raise
@_strchr
@_strcmp
@_strcpy
@_strlen
@_strstr
@_wcscmp
@_wcslen
@dyld_stub_binder
@fff?fff?fff?fff?fff?fff?fff?
@fffff.
@loader_path
@math_float
@r4Ic
@r8Ic
@rpath/libsoundsystem.dylib
@rpath/libtier0.dylib
@rpath/libvstdlib.dylib
@std::terminate()
@typeinfo for IStack_Annotation
@typeinfo for std::bad_alloc
@uMHc
@void std::__1::__sort<std::__1::__less<unsigned int, unsigned int>&, unsigned int*>(unsigned int*, unsigned int*, std::__1::__less<unsigned int, unsigned int>&)
@vtable for __cxxabiv1::__class_type_info
@vtable for __cxxabiv1::__si_class_type_info
@vtable for __cxxabiv1::__vmi_class_type_info
A)MDH
A+D$ 
A+D$$Hc
A+E$H
A+E$Hc
A+E$Lc
A+EH~&A
A+F$H
A+F$Hc
A+F$Lc
A+G(~&A
A+HdHc
A+M$Hc
A+N$Hc
A24CSosOperatorSamplerEvent
A9F@u;
A9FDuE
A9FHt?1
A9G L
A9N@~
A9N@~6I
A9T$ }
A9V |fA
A9V }	
A9V }	A
A9V@~
A9W |[A
A9\$ 
A9\$$
A9\$4
A9\$p
A9]@M
A9^$|
A;D$ ~
A;F8r
A;G ~
A;L$(
A;MXu
A;Opu(E
A;UXuFA
A;VXu A
A;\$$|
A;\$(|
A;\$@|
A;\$pu
A;\unsigned char|
A;]Lr
A;]long long|
A;^$|
A;^0|
A;_8u
A;_Lr
A;|$Xu
A;}Pu
AIL_set_redist_directory
AIL_shutdown
AIL_startup
APPSYSTEM: In ConnectInterfaces(), s_nRegistrationCount is %double!
ARBSATAp
ARRANGEMENTS ERROR: Loading arrangements file(error %short)!
ASARBSAXBRAp8p8p
ASARBSAXBRB`
ASARBSAXBSARBSAXBRB]ARBRA
ASATAp
ASI codec
ASI stream
ASI_stream_close
ASI_stream_open
ASI_stream_process
ASI_stream_property
ASI_stream_seek
ASI_stream_seek called, but it doesn'unsigned short exist.
ATBSATAp
ATCRAp
ATCYARAp
AWAVATS
AWAVATSA
AWAVATSE
AWAVATSH
AWAVATSI
AWAVATSM
AWAVAUATS
AWAVAUATSE
AWAVAUATSH
AWAVAUATSL
AWAVAUATSP
AWAVAUATSPA
AWAVAUATSPD
AWAVAUATSPE
AWAVAUATSPH
AWAVAUATSPI
AWAVAUATSPL
AWAVAUATSPM
AWAVS
AWAVS@
AWAVSA
AWAVSD
AWAVSH
AWAVSP
AWAVSPA
AWAVSPE
AWAVSPH
AWAVSPI
AWAVSPL
AWAVSPM
AZBSAp
A[ATAp
Abort processing sound event %short (scheduled recursively will not process this frame)
Active ?: %short
Active Voices: %double
AddNewSoundEvent:  %short has signed char hash collision with existing %short
AddSoundEvent event with empty name
AddSoundEvent:  %short has signed char hash collision with existing %short
AddSoundEvent:AddSoundEvent event with empty name
AddSoundEvents: SoundEvent %short was unable to convert to KV3.
AddSoundEvents: SoundEvent file %short was not compiled from signed char KeyValues3 file and is being converted. Please recompile.
AddSoundEvents: event with empty name
Adding operator stack matching existing name: %short
Addon unloaded, unloading sound resources.
Ai]Lh
AllPass
AnimGraphEditorUtils001
AnimationSystemUtils_001
AnimationSystem_001
Apply cos(angle) * weight before pan law
Arrangement: %short
Asampler_event
Assertion Failed in function %short():
AssetBrowserSystem_001
AssetPreviewSystem_001
AssetSystem001
AssetSystemTest001
AsyncSoundQueue
Atomic Type: %int
Attack time (ms)
Attempted long double restrict-use of signed char soundevent guid to start signed char new soundevent: %short
Attempted preload of soundevent %short with no vsnds
Attempting to pause non-existent soundevent: %short
Attempting to stop non-existent soundevent: %short
Audio Capture Device
Available Operators:
BLLcz
BRBRAp
BSC]ARAp
Bad KV3 data for resource '%short': %short
Bad command in vmix!
Bad expression operator: '%char%char', expected C style boolean expression operator.
Bad expression syntax: '%short', expected signed char single matching pair of enclosing braces.
Bad expression token: %char
Bad header (unrecognized encoding specifier)
Bad header format (expected ':'
Bad header format (expected '<!--'
Bad header format (expected 'encoding'
Bad header format (expected 'format'
Bad header format (expected 'kv3'
Bad header format (expected 'version'
Bad header format (expected encoding name)
Bad header format (expected encoding uuid)
Bad header format (expected format name)
Bad header format (expected format uuid)
Bad header format (malformed UUID)
Bad header format (no closing marker)
Bad header: invalid binary marker
Bad header: invalid compression header
Bad header: unrecognized encoding id
Bad index for GetBinaryBlobByte() (%double >= %double)
BakedLODBuilderMgr001
BandPass
Bandwidth
Base: %short
BenchmarkService001
BinaryProperties_GetValue
Bits/Sample:	%double
Blocking I/O hitch.  Freed memory while streaming in %short
C [A^]
C([A^]
C*[A\A^A_]
C0F9<
C0[A^]
C<;C(|*H
CAsyncWavDataCache
CAsyncWavDataCache:  %int sounds total %short, %.2f %% of capacity
CAtomicManipulator<CResourceArray<VSoundEvent_t> >
CAtomicManipulator<CResourceArray<VSoundStack_t> >
CAtomicManipulator<CResourceString>
CAtomicManipulator<CUtlString>
CAtomicManipulator<CUtlVector<SosEditItemInfo_t, CUtlMemory<SosEditItemInfo_t, int> > >
CAtomicManipulator<Vector2D>
CAudioCaptureDevice
CAudioDeviceNull2
CAudioMixState CAudioMixSourceList::GetLowLevelMixState()
CAudioMixer
CAudioMixer *CreateWaveMixer(CSfxTable *, int, int, int, int)
CAudioMixerEncoded
CAudioMixerWave
CAudioMixerWaveADPCM
CAudioMixerWaveADPCM::CAudioMixerWaveADPCM(CSfxTable *, uint)
CAudioMixerWaveMP3
CAudioOutputStream
CAudioProcessor
CAudioSDL
CAudioSource
CAudioSource *CreateWave(CSfxTable *, bool)
CAudioSourceCached
CAudioSourceMP3
CAudioSourceMemWave
CAudioSourceWave
CAudioSource_PlayerVoiceStream
CAudioSource_PlayerVoiceStream::CAudioSource_PlayerVoiceStream(const char *, uint64, CEntityIndex, int, int, int)
CBaseAppSystem<ISoundOpSystem>
CBaseAppSystem<ISoundOpSystemEdit>
CBaseAppSystem<ISoundSystem>
CBaseIntrospectedTypeManager
CBaseIntrospectedTypeManager:  Bindings don'unsigned short match.
CBaseIntrospectedTypeManager:  Missing TYPEMETA MDiskDataForResourceType
CClassVisitInfo *CSchemaVisitorInfoMapBase::LookupClass(ClassIntrospectionHandle_t)
CDSPEditor
CDefaultAccessor
CDefaultIntrospectedTypeManager<7738156623707665270ull, VSoundStackScript_t>
CDefaultIntrospectedTypeManager<8319404589508883318ull, VSoundEventScript_t>
CDefaultKeyValuesErrorSpew
CEmptyConVar
CExtrefTraversal
CFieldPathHuffmanEncoder::INode
CFieldPathHuffmanEncoder::InternalNode
CFieldPathHuffmanEncoder::LeafNode
CFilterAudioProcessor
CFmtStrN<256, false>
CFmtStrN<256, false>::CFmtStrN(const char *, ...) [SIZE_BUF = 256, QUIET_TRUNCATION = false]
CHAN_BODY
CHAN_ITEM
CHAN_STATIC
CHAN_VOICE
CHAN_WEAPON
CHRTFAudioProcessor
CI@tC
CKV3ResourceTypeManager<2020175222ull>
CKeyValues3Cluster allocated with bad alignment! (%p) (If this is inside of signed char heap allocation, you may need to inherit from CAlignedNewDelete< KV3_CLUSTER_SIZEOF >.)
CKeyValues3Cluster::CKeyValues3Cluster()
CKeyValues3Context *CKeyValues3Cluster::GetParentContext()
CKeyValues3Context::~CKeyValues3Context()
CKeyValuesTokenReader::SeekBackOneToken: It is only possible to seek back one token at signed char time
CMainAudioGraph
CMilesMP3
CMixVoiceList::CMixVoiceList(CAudioMixSourceList *, CVoiceList &, voice_send_submix_list_t *)
COLORCORRECTION_VERSION_1
CPlayerVoiceStream
CPostConnectCallback
CPresetDSPAudioProcessor
CPresetDSPAudioProcessor::CPresetDSPAudioProcessor(const char *, CUtlStringToken, float, int, dspglobalvars_t *)
CReferenceCleanupTraversal
CResourceAllocatorUtils
CResourceArray
CResourceReferenceFixupTraversal
CResourceString
CSchemaClassBinding<SelectedEditItemInfo_t>
CSchemaClassBinding<SosEditItemInfo_t>
CSchemaClassBinding<VSoundEventScript_t>
CSchemaClassBinding<VSoundEvent_t>
CSchemaClassBinding<VSoundStackScript_t>
CSchemaClassBinding<VSoundStack_t>
CSchemaClassBindingBase
CSchemaEnumBinding<SosEditItemType_t>
CSchemaEnumBindingBase
CSchemaFieldVisitor
CSchemaFieldVisitorInfoMap<CExtrefTraversal>
CSchemaInstallCallback
CSchemaManipulator<CResourceArray<VSoundEvent_t> >
CSchemaManipulator<CResourceArray<VSoundStack_t> >
CSchemaManipulator<CResourceString>
CSchemaManipulator<CUtlString>
CSchemaManipulator<CUtlVector<SosEditItemInfo_t, CUtlMemory<SosEditItemInfo_t, int> > >
CSchemaManipulator<Vector2D>
CSchemaRegistration
CSchemaRegistration_soundsystem
CSchemaUtlVectorManipulator<CUtlVector<SosEditItemInfo_t, CUtlMemory<SosEditItemInfo_t, int> >, SosEditItemInfo_t>
CSchemaVisitorBase
CSchemaVisitorInfoMapBase
CSequence:	%float : %int : %int
CSequence: %short
CSequenceArranger
CSfxTable *S_FindName(const char *, bool)
CSfxTable *S_PrecacheSound(const char *)
CSfxTable *S_PrecacheSound_src2(const char *, VMIX_MEMTYPE)
CSosDependent
CSosEdit
CSosEventInfoWithFieldData_t **CSosMessageQueue<SoundEventGuid_t>::StartAddFieldInfo(K, SosMessageQueueInfoType_t, bool) [K = SoundEventGuid_t]
CSosEventInfoWithFieldData_t **CSosMessageQueue<unsigned int>::StartAddFieldInfo(K, SosMessageQueueInfoType_t, bool) [K = unsigned int]
CSosEventInfo_t
CSosGroupAction
CSosGroupActionLimit
CSosManagedEntryMatch *CSosEntryMatchList::GetEntryFromIndex(int)
CSosOPeratorGetOpVarInfo
CSosOperator
CSosOperator::CSosOperator()
CSosOperatorAnimateFloat3
CSosOperatorAnimateFloat3::CSosOperatorAnimateFloat3()
CSosOperatorArrangementStart
CSosOperatorArrangementStart::CSosOperatorArrangementStart()
CSosOperatorAudibility
CSosOperatorAudibility::CSosOperatorAudibility()
CSosOperatorBlockEvents
CSosOperatorBlockEvents::CSosOperatorBlockEvents()
CSosOperatorBlockTest
CSosOperatorBlockTest::CSosOperatorBlockTest()
CSosOperatorCalcDirectionalVec3
CSosOperatorCalcDirectionalVec3::CSosOperatorCalcDirectionalVec3()
CSosOperatorCalcDoppler
CSosOperatorCalcDoppler::CSosOperatorCalcDoppler()
CSosOperatorCalcFixedRotation
CSosOperatorCalcFixedRotation::CSosOperatorCalcFixedRotation()
CSosOperatorClampFloat
CSosOperatorClampFloat::CSosOperatorClampFloat()
CSosOperatorConvar
CSosOperatorConvar::CSosOperatorConvar()
CSosOperatorCurve4
CSosOperatorCurve4::CSosOperatorCurve4()
CSosOperatorDBToGain
CSosOperatorDBToGain::CSosOperatorDBToGain()
CSosOperatorDelta
CSosOperatorDelta::CSosOperatorDelta()
CSosOperatorDeltaFloat3
CSosOperatorDeltaFloat3::CSosOperatorDeltaFloat3()
CSosOperatorDistance
CSosOperatorDistance::CSosOperatorDistance()
CSosOperatorDistantDSP
CSosOperatorDistantDSP::CSosOperatorDistantDSP()
CSosOperatorDotaGroundUnderWater
CSosOperatorDotaGroundUnderWater::CSosOperatorDotaGroundUnderWater()
CSosOperatorDrawRadius
CSosOperatorDrawRadius::CSosOperatorDrawRadius()
CSosOperatorEntityInfo
CSosOperatorEntityInfo::CSosOperatorEntityInfo()
CSosOperatorEntityWorldAABB
CSosOperatorEntityWorldAABB::CSosOperatorEntityWorldAABB()
CSosOperatorFacing
CSosOperatorFacing::CSosOperatorFacing()
CSosOperatorFalloff
CSosOperatorFalloff::CSosOperatorFalloff()
CSosOperatorFalloffTail
CSosOperatorFalloffTail::CSosOperatorFalloffTail()
CSosOperatorFalloffVR
CSosOperatorFalloffVR::CSosOperatorFalloffVR()
CSosOperatorFloat
CSosOperatorFloat3ToFloat
CSosOperatorFloat3ToFloat::CSosOperatorFloat3ToFloat()
CSosOperatorFloat::CSosOperatorFloat()
CSosOperatorFloatAccumulate12
CSosOperatorFloatAccumulate12::CSosOperatorFloatAccumulate12()
CSosOperatorFloatFilter
CSosOperatorFloatFilter::CSosOperatorFloatFilter()
CSosOperatorFloatToFloat3
CSosOperatorFloatToFloat3::CSosOperatorFloatToFloat3()
CSosOperatorFloatToSpeakers
CSosOperatorFloatToSpeakers::CSosOperatorFloatToSpeakers()
CSosOperatorFunc1
CSosOperatorFunc1::CSosOperatorFunc1()
CSosOperatorGainToDB
CSosOperatorGainToDB::CSosOperatorGainToDB()
CSosOperatorGetOpVarArrayIndex
CSosOperatorGetOpVarArrayIndex::CSosOperatorGetOpVarArrayIndex()
CSosOperatorGetOpVarFloat
CSosOperatorGetOpVarFloat3
CSosOperatorGetOpVarFloat3::CSosOperatorGetOpVarFloat3()
CSosOperatorGetOpVarFloat::CSosOperatorGetOpVarFloat()
CSosOperatorGetOpVarInfo
CSosOperatorGetOpVarInfo::CSosOperatorGetOpVarInfo()
CSosOperatorGetOpVarString
CSosOperatorGetOpVarString::CSosOperatorGetOpVarString()
CSosOperatorGetOpVarVsnd
CSosOperatorGetOpVarVsnd::CSosOperatorGetOpVarVsnd()
CSosOperatorGlobals
CSosOperatorGlobals::CSosOperatorGlobals()
CSosOperatorGoTo
CSosOperatorGoTo::CSosOperatorGoTo()
CSosOperatorGroupInfo
CSosOperatorGroupInfo::CSosOperatorGroupInfo()
CSosOperatorGroupOpvars
CSosOperatorGroupOpvars::CSosOperatorGroupOpvars()
CSosOperatorGroupQuit
CSosOperatorGroupQuit::CSosOperatorGroupQuit()
CSosOperatorGroupStop
CSosOperatorGroupStop::CSosOperatorGroupStop()
CSosOperatorGroups
CSosOperatorGroups::CSosOperatorGroups()
CSosOperatorImportStack
CSosOperatorImportStack::CSosOperatorImportStack()
CSosOperatorInRangeFloat
CSosOperatorInRangeFloat::CSosOperatorInRangeFloat()
CSosOperatorIncrementOpVarFloat
CSosOperatorIncrementOpVarFloat::CSosOperatorIncrementOpVarFloat()
CSosOperatorIntervalTimer
CSosOperatorIntervalTimer::CSosOperatorIntervalTimer()
CSosOperatorIterateAndMergeSpeakers
CSosOperatorIterateAndMergeSpeakers::CSosOperatorIterateAndMergeSpeakers()
CSosOperatorLogicSwitch
CSosOperatorLogicSwitch12Float
CSosOperatorLogicSwitch12Float::CSosOperatorLogicSwitch12Float()
CSosOperatorLogicSwitch3Float
CSosOperatorLogicSwitch3Float3
CSosOperatorLogicSwitch3Float3::CSosOperatorLogicSwitch3Float3()
CSosOperatorLogicSwitch3Float::CSosOperatorLogicSwitch3Float()
CSosOperatorLogicSwitch::CSosOperatorLogicSwitch()
CSosOperatorLogicSwitchFloat3
CSosOperatorLogicSwitchFloat3::CSosOperatorLogicSwitchFloat3()
CSosOperatorLogicSwitchSpeakers
CSosOperatorLogicSwitchSpeakers::CSosOperatorLogicSwitchSpeakers()
CSosOperatorMathAverage8
CSosOperatorMathAverage8::CSosOperatorMathAverage8()
CSosOperatorMixGraphInput
CSosOperatorMixGraphInput::CSosOperatorMixGraphInput()
CSosOperatorMixGroup
CSosOperatorMixGroup::CSosOperatorMixGroup()
CSosOperatorMixLayer
CSosOperatorMixLayer::CSosOperatorMixLayer()
CSosOperatorMixLayerAmount
CSosOperatorMixLayerAmount::CSosOperatorMixLayerAmount()
CSosOperatorMixTrigger
CSosOperatorMixTrigger::CSosOperatorMixTrigger()
CSosOperatorNoise
CSosOperatorNoise::CSosOperatorNoise()
CSosOperatorNull
CSosOperatorOcclusion
CSosOperatorOcclusion2
CSosOperatorOcclusion2::CSosOperatorOcclusion2()
CSosOperatorOcclusion::CSosOperatorOcclusion()
CSosOperatorPauseSoundEvents
CSosOperatorPauseSoundEvents::CSosOperatorPauseSoundEvents()
CSosOperatorPlayVSnd
CSosOperatorPlayVSnd::CSosOperatorPlayVSnd()
CSosOperatorPointContents
CSosOperatorPointContents::CSosOperatorPointContents()
CSosOperatorPointOnLine
CSosOperatorPointOnLine::CSosOperatorPointOnLine()
CSosOperatorPointOnSphere
CSosOperatorPointOnSphere::CSosOperatorPointOnSphere()
CSosOperatorPointOnVolume
CSosOperatorPointOnVolume::CSosOperatorPointOnVolume()
CSosOperatorPosVec8
CSosOperatorPosVec8::CSosOperatorPosVec8()
CSosOperatorPrintFloat
CSosOperatorPrintFloat3
CSosOperatorPrintFloat3::CSosOperatorPrintFloat3()
CSosOperatorPrintFloat::CSosOperatorPrintFloat()
CSosOperatorPrintString
CSosOperatorPrintString::CSosOperatorPrintString()
CSosOperatorPrintVsnd
CSosOperatorPrintVsnd::CSosOperatorPrintVsnd()
CSosOperatorQueueToTrack
CSosOperatorQueueToTrack::CSosOperatorQueueToTrack()
CSosOperatorRandom
CSosOperatorRandom::CSosOperatorRandom()
CSosOperatorRandomFloat3
CSosOperatorRandomFloat3::CSosOperatorRandomFloat3()
CSosOperatorRandomizeFloat
CSosOperatorRandomizeFloat::CSosOperatorRandomizeFloat()
CSosOperatorRemapValue
CSosOperatorRemapValue::CSosOperatorRemapValue()
CSosOperatorRightAngleFloat3
CSosOperatorRightAngleFloat3::CSosOperatorRightAngleFloat3()
CSosOperatorSamplerEvent::CSosOperatorSamplerEvent()
CSosOperatorSequenceStart
CSosOperatorSequenceStart::CSosOperatorSequenceStart()
CSosOperatorSetConvar
CSosOperatorSetConvar::CSosOperatorSetConvar()
CSosOperatorSetEventInfo
CSosOperatorSetOpVarFloat
CSosOperatorSetOpVarFloat3
CSosOperatorSetOpVarFloat3::CSosOperatorSetOpVarFloat3()
CSosOperatorSetOpVarFloat::CSosOperatorSetOpVarFloat()
CSosOperatorSetOpVarString
CSosOperatorSetOpVarString::CSosOperatorSetOpVarString()
CSosOperatorSourceInfo
CSosOperatorSourceInfo::CSosOperatorSourceInfo()
CSosOperatorSpatializeSpeakers
CSosOperatorSpatializeSpeakers::CSosOperatorSpatializeSpeakers()
CSosOperatorSpatializeVR
CSosOperatorSpatializeVR::CSosOperatorSpatializeVR()
CSosOperatorSpeakers
CSosOperatorSpeakers::CSosOperatorSpeakers()
CSosOperatorStack *CSosStackExecutionList::Remove(int)
CSosOperatorStack: %int
CSosOperatorStack::GetOpField: Unable to find operator field hash %int in %short
CSosOperatorStack::GetOpField: Unable to find opfield %s.%short in %short
CSosOperatorStack::GetOperatorNameSpace: Invalid operator index %int in %short
CSosOperatorStack::GetTotalOperatorSize: Invalid operator index %int in %short
CSosOperatorStack::ImportMembers: Importing operator with same name as existing operator: %short
CSosOperatorStack::InitFromSoundEvent: Unable to reference operator stack in stack %short, soundevent %short
CSosOperatorStack::InitFromSoundEvent: Unable to resolve soundevent from hash %i.. this should not happen
CSosOperatorStack::ParseKV Trying illegal operator overwrite %short in stack %short
CSosOperatorStack::ParseKV: Operator %short : Unknown sound operator type %short in stack %short
CSosOperatorStack::ParseKV: Operator %short index differs in stack %short
CSosOperatorStack::ParseKV: Operator %short invalid index in stack %short
CSosOperatorStack::ParseKV: Stack %short, has operator %short already declared, second declaration ignored
CSosOperatorStack::ReferenceCopyMemPool: Null mempool in %short
CSosOperatorStack::SetOpField: Unable to find operator field hash %int in %short
CSosOperatorStack::SetOpField: Unable to find opfield %s.%short in %short
CSosOperatorStack::SetOpFieldData: Incoming data size %int greater than field %short, %int on %short
CSosOperatorStackCollection
CSosOperatorStackControl
CSosOperatorStackControl::CSosOperatorStackControl()
CSosOperatorStackInfo
CSosOperatorStackInfo::CSosOperatorStackInfo()
CSosOperatorStartSoundEvent
CSosOperatorStartSoundEvent::CSosOperatorStartSoundEvent()
CSosOperatorStartVMix8
CSosOperatorStartVMix8::CSosOperatorStartVMix8()
CSosOperatorStopSoundEvents
CSosOperatorStopSoundEvents::CSosOperatorStopSoundEvents()
CSosOperatorStopTrack
CSosOperatorStopTrack::CSosOperatorStopTrack()
CSosOperatorString
CSosOperatorString::CSosOperatorString()
CSosOperatorSubmix
CSosOperatorSubmix::CSosOperatorSubmix()
CSosOperatorSystem::CSosOperatorSystem()
CSosOperatorSystem::SetOpField: Unable to find operator stack %short
CSosOperatorSystem::SetOpField: Unable to find operator stack from guid %double
CSosOperatorSystem::StartSoundEvent Unable to find soundevent %short
CSosOperatorSystem::StartSoundEvent Unable to start soundevent %short
CSosOperatorSystem::StartSoundEvent called with invalid soundevent hash
CSosOperatorTimer
CSosOperatorTimer::CSosOperatorTimer()
CSosOperatorTimerRamp
CSosOperatorTimerRamp::CSosOperatorTimerRamp()
CSosOperatorVMixInput
CSosOperatorVMixInput::CSosOperatorVMixInput()
CSosOperatorVec3
CSosOperatorVec3::CSosOperatorVec3()
CSosOperatorVelocity
CSosOperatorVelocity::CSosOperatorVelocity()
CSosOperatorVsndInfo
CSosOperatorVsndInfo::CSosOperatorVsndInfo()
CSosSetLibraryStackFieldsInfo_t
CSosSetSoundEventFieldsInfo_t
CSosSoundEventGroup *CSosSoundEventGroupList::GetGroup(int8)
CSosStartSoundEventInfo_t
CSosStartSoundEventQueueInfo_t
CSoundEvent: %short
CSoundEvent: Warning, soundevent_data selection field overrun
CSoundEventManager
CSoundMixGroupSystem
CSoundOpSystem
CSoundSampler
CSoundSampler:			Sample: %short
CSoundSampler:		Samples: %int
CSoundSampler:		long long signed char::*: %int
CSoundSampler:	Center: %int
CSoundSampler:	Key: %int : %int
CSoundSampler:	Zones: %int
CSoundSampler:	__int128 int::*: %int
CSoundSampler:	long long signed char::*: %int
CSoundSampler: Key Groups: %int
CSoundSampler: Sampler: %short
CSoundSampler: SoundEvent: %short
CSoundSampler: __int128 int::*: %int
CSoundSampler: long long signed char::*: %int
CSoundSamplers
CSoundSequencer
CSoundSystem
CStackAnnotation<CSchemaClassField const*, void, void, void, void, void, void, void, void>
CTSListBase: Misaligned list
CTSListBase::CTSListBase()
CTSQueue corrupt
CTSQueue corruption
CTSQueue: Misaligned node
CTSQueue: Misaligned queue
CTSQueue::Node_t *CTSQueue<CAsyncWaveData *, false>::Pop() [T = CAsyncWaveData *, bTestOptimizer = false]
CTSQueue::Node_t *CTSQueue<CAsyncWaveData *, false>::Push(CTSQueue::Node_t *) [T = CAsyncWaveData *, bTestOptimizer = false]
CTSQueue<CAsyncWaveData *, false>::CTSQueue() [T = CAsyncWaveData *, bTestOptimizer = false]
CTSQueue<CAsyncWaveData *, false>::~CTSQueue() [T = CAsyncWaveData *, bTestOptimizer = false]
CThreadEvent::CThreadEvent(bool)
CThreadEvent::Set()
CThreadFastMutex::Lock(unsigned long long, unsigned int) volatile
CThreadRWLock::LockForWrite()
CThreadRWLock::UnlockWrite()
CThreadRWLock::WaitForRead()
CThreadSyncObject::~CThreadSyncObject()
CTier0AppSystem<ISoundOpSystem>
CTier0AppSystem<ISoundOpSystemEdit>
CTier0AppSystem<ISoundSystem>
CTier1AppSystem<ISoundOpSystem, 0>
CTier1AppSystem<ISoundOpSystemEdit, 0>
CTier1AppSystem<ISoundSystem, 0>
CTier2AppSystem<ISoundOpSystem, 0>
CTier2AppSystem<ISoundOpSystemEdit, 0>
CTier2AppSystem<ISoundSystem, 0>
CUniformRandomStream::CUniformRandomStream()
CUniformRandomStream::RandomFloat(float, float)
CUniformRandomStream::RandomInt(int, int)
CUniformRandomStream::SetSeed(int)
CUtlBuffer::CUtlBuffer(const void *, int, int)
CUtlBuffer::CUtlBuffer(int, int, int)
CUtlBuffer::VaPrintf: String overflowed buffer [%llu]
CUtlCStringConversion
CUtlCharConversion
CUtlCharConversion::CUtlCharConversion(char, const char *, int, const CUtlCharConversion::ConversionArray_t *)
CUtlLinkedList overflow! (exhausted index range)
CUtlLinkedList overflow! (exhausted memory allocator)
CUtlMemoryArena::CUtlMemoryArena(uint32, bool)
CUtlMemoryPoolBase: Cannot specify 0 elements to grow each time!
CUtlMemoryPoolBase::CUtlMemoryPoolBase(int, int, int, MemoryPoolGrowType_t, const char *)
CUtlMemoryPoolBase::FreeList_t *CUtlMemoryPoolBase::AddNewBlob()
CUtlRBTree overflow with %u elements!
CUtlString
CUtlString::SetDirect does not support resizing strings in place.
CUtlSymbol CUtlSymbolTable::AddString(const char *)
CUtlVector
CVAudio
CVMixInstance *CVMixTypeManager::GetPreviewInstanceForGraphName(CUtlStringToken)
CVMixMixer
CVProfNode *CVProfNode::GetVParent()
CVProfNode::EnterScope()
CVProfNode::ExitScope()
CVProfNode::GetSubNode(char const*, int, char const*, int)
CVSoundEventScriptTypeManager
CVSoundEventScriptTypeManager::AddSoundEvent:  %short has signed char hash collision with existing %short
CVSoundStackScriptTypeManager
CVSoundStackScriptTypeManager::Allocate can'unsigned short parse stack %short
CVSoundStackScriptTypeManager::Allocate can'unsigned short parse stack KV %short
CVSoundStackScriptTypeManager::Allocate stack with empty name
CVSoundTypeManager
CXL;}
CalcSampleSize(nBits, nChannels) == pMixer->GetMixSampleSize()
Can'unsigned short call GetBinaryBlobByte() on signed char non-blob.
Can'unsigned short call GetBinaryBlobLength() on signed char non-blob.
Can'unsigned short find mix layer %short
Can'unsigned short find mixgroup name %short for submix
Can'unsigned short find sound event to remove for %short!
Cannot determine resource type for handle '%short' - schema data not loaded for the referred-to type?
Cannot register same format from/to signed char KV3 conversion (from '%short' to '%short')
Cannot save KV3 text to signed char non-text buffer!
Cannot save as KV3_FORMAT_LOAD_WITH_NO_UPCONVERSION.
Cffffff.
Channels:	%double
CkeyValuesTokenReader::SeekBackOneToken: No tokens read yet
Cleaning up leaked audio stream!
Clock ERROR!: %.2f %.2f
Compare the compiled and loaded contents of 2 soundevents.
ConCommand
ConCommandBase
ConMsg(char const*, ...)
ConVar
ConVar(%short) defined with infinite float value (%short)
ConVarRef %short doesn'unsigned short point to an existing ConVar
Conditional Error: %short
ConfigurationSystem_001
Connection Offset: %int
Construction is only allowed from the resolve function
Continue: elapsed time: %float, next sync time: %float, local elapsed: %float, local sync: %float
Copying '%short' to '%short'
Count
CreateInterface
CurTime: %float
Currently gets info for signed char single operator field
Currently sets signed char single float operator field
Cutoff Freq
Cutoff Frequency
D$$A9
D$0B;
D$@H9
D$BfA
D2pHi
D9;~I
D9`$|
D9g,unsigned short	H
D9pp~dD9
D9pp~eD9
D9pp~gD9
D9s@~
D9sXu
D9x@u
D9{,tpH
D;...(u
D;C`u
D;char,|*H
D;k0u
D;kHu,
D;sx|
D;xHu@
D;{(|
D>4Hc
DATAH
DATAL
DSP NODE
DSP PRESET: %.0f size:(%.0f,%.0f) height:(%.0f) dif %.4f : refl %.4f : cobj: %.0f : sky %.0f 
DSP: Warning, clamping out of range parameter.
DSP: Warning, failed to allocate LFO.
DSP: Warning, failed to allocate amp.
DSP: Warning, failed to allocate chorus.
DSP: Warning, failed to allocate delay for diffusor.
DSP: Warning, failed to allocate delay for pitch shifter.
DSP: Warning, failed to allocate delay for reverb.
DSP: Warning, failed to allocate delay line.
DSP: Warning, failed to allocate diffusor.
DSP: Warning, failed to allocate envelope follower.
DSP: Warning, failed to allocate envelope.
DSP: Warning, failed to allocate filter for delay line.
DSP: Warning, failed to allocate filter.
DSP: Warning, failed to allocate flt for reverb.
DSP: Warning, failed to allocate lfo or mdy for chorus.
DSP: Warning, failed to allocate mod delay.
DSP: Warning, failed to allocate pitch shifter.
DSP: Warning, failed to allocate reverb.
DUCT Detected 
Data Count: %int
Data Size: %int
DebugTextureInfo001
Decay target amplitude
Decay time (ms)
Decompression failure
Default: %short
Default_Mix
Delay %double samples too large, clamped to %double samples
Delay Count
Delay Scale
Delay Type
DependencyClass::m_pDependencyLL == NULL
Depth Reflectivity
Describe the current sound device.
Detected %double-level recursion in sound operator stack, abort!
DevMsg(char const*, ...)
DevWarning(char const*, ...)
Dffffff.
Distortion Threshold
Distortion feedback
Distortion long long int::* (1.0 = wet)
DotaCardGameClient_001
Double-register of KV3 conversion (from '%short' to '%short')
Dropping Voice data (%double bytes)
Duration: %float
Dynamics
E A+E
E(fff.
E9,$H
E9,$~
E94$t
E9g ~
E9g@~
E9gT|
E9l$@
E9l$@~
E9l$T
E9l$T|
E9u@~
E9uT|
E9w@~
E9wT}$L
E9~(~NI
E;__float128@u
E;__int128 ~0
E;float(|
E;l$h
E;n8u
E;nhu
E;pxD
E;t$ u
E;t$(|
E;u(|
E;u0D
E;unsigned __int128 u
E;unsigned __int128(u
E;unsigned __int128(|
E;wchar_t u
E;wchar_t@u
E;|$ ~<
E;|$8u
E;|$8|
E;|$P
E;}(|
E;}8u#A
E;~xu)A
EHfffff.
EHffffff.
ERROR: CAtomicManipulator::Allocate() Cannot allocate CResourceArray
ERROR: CAtomicManipulator::AllocateAndCopy() Cannot allocate CResourceArray
ERROR: CAtomicManipulator::Copy() Cannot copy CResourceArray(FIXME: maybe you can?)
ERROR: CAtomicManipulator::Deallocate() Cannot deallocate CResourceArray
ERROR: Problem allocating permanent data for resource in file '%short'. See above for reason(short)
ERROR: missing enum name!
ERROR: missing enum tokenset!
ERROR: sound event %short operator %short
EXPORTSYSTEM_INTERFACE_VERSION_001
EconItemToolModel_001
Element Count: %int
Enable automatic buffer latency detection (requires driver support)
Encountered ConCommand '%short' without signed char callback!
Encountered too many releases for resource "%short"
EngineServiceMgr001
Envelope Type
EnvironmentMapBuilder_001
Error loading resource "%short" (Invalid resource version: %double != %double)
Error: %short : Math expression type not currently supported in sound operator math_accumulate12_float
Error: Failed to get mix group %short!
Error: Filepath arg required
Error: Invalid SoundEvent Hash %int from entry %short
Error: MixGroup %short cannot be resolved!
Error: MixGroup %short, in LayerTriggers cannot be resolved!
Error: MixGroup %short, in SoundMixer %short, cannot be resolved!
Error: MixLayer Trigger entries require minimum 2 arguments after layer trigger for %short
Error: MixLayer operator has invalid mix group index!
Error: MixLayer operator has invalid mix layer index!
Error: Operator %short, EntryMatchList has no free slots!
Error: Operator %short, problems parsing operator field %short
Error: Operator %short, unknown sound operator attribute %short
Error: Parsing soundmixers.txt, mixgroup rules incomplete at group %short!
Error: Parsing soundmixers.txt, mixgroup rules incomplete!
Error: Parsing soundmixers.txt, soundmixer mix group values incomplete!
Error: Stack %short Operator %short, opvar field %short specifies type "enum" but fails to specify valid "enum_field"
Error: Too many mix groups! MixGroup %short ignored
Error: Too many mix layers! MixLayer %short ignored
Error: Too many sound mixers! SoundMixer %short ignored
Error: Unable to find mixgroup for filepath %short
Error: Unknown atomic data type!
Event Data: %int
Event VSNDS:
EventSystem001
Expected '#'
Expected ',' or '%short'
Expected '=' after member name '%short'
Expected '['
Expected '{'
Expected CUtlBuffer::TEXT_BUFFER for LoadKV3Text
Expected hex byte (eg. 00-FF)
Expected member name or '}'
Expected token
Expected value or ']'
Exponential
Exponential Ramp
Extra taps
F A+F
F,[A^]
F0A;E0
F17IVMixToolServices
FCVAR_NEVER_AS_STRING
FIELDATA COMPARE FAIL: %short->%short
FIELDATASIZE COMPARE FAIL: %short->%short
FIELINFO COMPARE FAIL: %short->%short
FREEING MATCH ENTRY:
FTA+FdH
FX long long int::* (1.0 == wet)
F\A;FXvzH
Fade In
Fade Out
Failed to allocate CUtlMemoryPoolBase blob of size %double ('%short' blob count = %double)
Failed to assign bool literal value
Failed to call CBaseIntrospectedTypeManager::Init
Failed to call CBaseIntrospectedTypeManager::SetDiskDataBinding
Failed to decode %short
Failed to fix resource reference '%short' (%short)- ID = %016llX, Expected in extref block.'
Failed to initialize SDL Audio device!
Failed to load soundstacks/mixgraph.vmix
Feedback
Feedback scale
Field Type: %int
FieldIntrospectionHandle_t CSchemaFieldIterator::GetRawFieldHandle() const
Fields:
File %short missing sounds dir. Fixing for now.
File %short missing vsnd extension. Fixing for now.
Filter Bandwidth
Filter Quality
Filter Type
Filter bandwidth
FilteredLinear
Find( pName ) == int
Fixup corrupted .wav file if engine crashed during startmovie/endmovie, etc.
FlattenedSerializersVersion001
FloatsAreEqual( flSend, 1.0f, e-3f )
Flush all unlocked async audio data
Flush and long double restrict-parse the sound operator system
FmtStrVSNPrintf truncated to %double without QUIET_TRUNCATION specified! String: "%short"
FmtStrVSNPrintf truncated without QUIET_TRUNCATION specified!
FontManager_001
Forward Saw
Free ?: %short
From Class Binding
From Enum Binding
G8H	p(]
G@HcG
GAMECONSOLE
GLHcG
GLHc_
GPA+GdLc
G`;GPu
Game v.o. volume
Game volume
GameResourceServiceClientV001
GameResourceServiceServerV001
GameStartup
GameUIService_001
Get data related to mix group matching string
GetAsNumeric() - unsupported type '%double'!
GetMemPtr()
GetMemPtr() && pSrcStack
GetSoundEvent: unable to get event by hash %int
GetSoundEvent: unable to get event by name %short
GetSoundEventBaseHash: unable to get event by hash %int
GetSoundEventBaseHash: unable to get event by name %short
GetSoundEventBaseName: unable to get event by hash %int
GetSoundEventFieldData: unable to get event by hash %int
GetSoundEventFieldData: unable to get event by name %short
GetSoundEventGroups: unable to get event by name %short
GetSoundEventStackParamInfoVector: unable to get event by hash %int
GetSoundEventStackParamInfoVector: unable to get event by name %short
GetSoundEventUpdateGroups: unable to get event by hash %int
GetSoundEventUpdateStackHash: unable to get event by hash %int
GetSoundEventUpdateStackHash: unable to get event by name %short
GetSoundEventUpdateStackName: unable to get event by hash %int
GetTable() != nullptr
GetType() == KEYVALUES3_TYPE_TABLE
GetVSndNameForSoundEvent( %short ) missing
Graphs
Group: %short
Groups %int: %int
H	p(]
H	wchar_t(]
H!wchar_t(]
H9Z u
H;A(uuH
HALL Detected 
HFPOH
HFPOL
HFPO]
HGRPH
HGRPL
HIGHDPI
HKeySymbol KeyValues::GetNameSymbol() const
HKeySymbol KeyValues::GetNameSymbolCaseSensitive() const
HLLc`
HSound
HSoundEventScript
HSoundStackScript
HVMixList
H[A\A]A^A_]
H[A^A_]
H__ZdaPv
H__ZdlPv
H__Znam
H__Znwm
HammerMapLoader001
Hc@pI
HcC0D
HcC<H
HcHXH
HcI(H
HcIHH
HcJX9
HcK0H
HcKDH
HcKHH
HcK`H
HcN(I
HcrxH
HcspH
Height Reflectivity
HelpSystem_001
HighPass
HostStateMgr001
I CUtlLinkedList<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short>, unsigned short> >::AllocInternal(bool) [T = CQueuedVSoundLoader::AsyncSoundQueue_t, S = unsigned short, ML = false, I = unsigned short, M = CUtlMemory<UtlLinkedListElem_t<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short>, unsigned short>]
I CUtlRBTree<CUtlMap<CSosDependent *, int, unsigned short, bool (*)(CSosDependent *const &, CSosDependent *const &)>::Node_t, unsigned short, CUtlMap<CSosDependent *, int, unsigned short, bool (*)(CSosDependent *const &, CSosDependent *const &)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSosDependent *, int, unsigned short, bool (*)(CSosDependent *const &, CSosDependent *const &)>::Node_t, unsigned short>, unsigned short> >::NewNode(const T *) [T = CUtlMap<CSosDependent *, int, unsigned short, bool (*)(CSosDependent *const &, CSosDependent *const &)>::Node_t, I = unsigned short, L = CUtlMap<CSosDependent *, int, unsigned short, bool (*)(CSosDependent *const &, CSosDependent *const &)>::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSosDependent *, int, unsigned short, bool (*)(CSosDependent *const &, CSosDependent *const &)>::Node_t, unsigned short>, unsigned short>]
I CUtlRBTree<CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, unsigned short, CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, unsigned short>, unsigned short> >::NewNode(const T *) [T = CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, I = unsigned short, L = CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, unsigned short>, unsigned short>]
I CUtlRBTree<CUtlMap<const char *, CSosOperator *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int, CUtlMap<const char *, CSosOperator *, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, CSosOperator *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int> >::NewNode(const T *) [T = CUtlMap<const char *, CSosOperator *, int, bool (*)(const char *const &, const char *const &)>::Node_t, I = int, L = CUtlMap<const char *, CSosOperator *, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, CSosOperator *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int>]
I CUtlRBTree<CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int, CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int> >::NewNode(const T *) [T = CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, I = int, L = CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int>]
I CUtlRBTree<CUtlMap<const char *, int, int, bool (*)(const char *const &, const char *const &)>::Node_t, int, CUtlMap<const char *, int, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, int, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int> >::NewNode(const T *) [T = CUtlMap<const char *, int, int, bool (*)(const char *const &, const char *const &)>::Node_t, I = int, L = CUtlMap<const char *, int, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, int, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int>]
I CUtlRBTree<CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short, CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short>, unsigned short> >::NewNode(const T *) [T = CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, I = unsigned short, L = CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short>, unsigned short>]
I CUtlRBTree<CUtlMap<unsigned int, SosOpFieldMapInfo_t *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short, CUtlMap<unsigned int, SosOpFieldMapInfo_t *, unsigned short, CDefLess<unsigned int> >::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, SosOpFieldMapInfo_t *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short>, unsigned short> >::NewNode(const T *) [T = CUtlMap<unsigned int, SosOpFieldMapInfo_t *, unsigned short, CDefLess<unsigned int> >::Node_t, I = unsigned short, L = CUtlMap<unsigned int, SosOpFieldMapInfo_t *, unsigned short, CDefLess<unsigned int> >::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, SosOpFieldMapInfo_t *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short>, unsigned short>]
I CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Insert(const T &, ERBTreeInsertBehavior) [T = CUtlSymbolTable::CStringPoolIndex, I = unsigned short, L = CUtlSymbolTable::CLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short>]
I CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::NewNode(const T *) [T = CUtlSymbolTable::CStringPoolIndex, I = unsigned short, L = CUtlSymbolTable::CLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short>]
I CUtlRBTree<CUtlSymbolTableLargeBaseTreeEntry_t *, long long, CTreeEntryLess<CNonThreadsafeTree<false>, false>, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTableLargeBaseTreeEntry_t *, long long>, long long> >::NewNode(const T *) [T = CUtlSymbolTableLargeBaseTreeEntry_t *, I = long long, L = CTreeEntryLess<CNonThreadsafeTree<false>, false>, M = CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTableLargeBaseTreeEntry_t *, long long>, long long>]
I CUtlRBTree<unsigned int, unsigned short, bool (*)(const unsigned int &, const unsigned int &), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::NewNode(const T *) [T = unsigned int, I = unsigned short, L = bool (*)(const unsigned int &, const unsigned int &), M = CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short>]
I CUtlRBTree<void *, int, bool (*)(void *const &, void *const &), CUtlMemory<UtlRBTreeNode_t<void *, int>, int> >::NewNode(const T *) [T = void *, I = int, L = bool (*)(void *const &, void *const &), M = CUtlMemory<UtlRBTreeNode_t<void *, int>, int>]
IAppSystem
IAsyncWavDataCache
IAtomicManipulator
IAudioDevice2
IAudioDevice2 *CAudioDeviceList::CreateDevice(audio_device_init_params_t &)
IAudioOutputStream
IAudioOutputStream *AudioStreamCreate(uint, uint, uint)
IAudioStream
IAudioStreamEvent
IConCommandBaseAccessor
IConVar
ID of the sound device to use
IKeyValuesErrorSpew
IMixFilter
IQuickTime001
IResourceAllocatorUtils
IResourceTypeManager
ISchemaBinding
ISchemaCollectionManipulator
ISchemaManipulator
ISchemaSearchTester<CSchemaClassInfo const*>
ISequenceArranger
ISoundEventManager
ISoundMixGroupSystem
ISoundOpSystem
ISoundOpSystemEdit
ISoundSamplers
ISoundSystem
IStack_Annotation::IStack_Annotation(CCallStackMarkerBase const&)
IStack_Annotation::~IStack_Annotation()
IVAudio
IVConCommDataReceived
Ic@xD9
IcE|H
IcG Hi
IcG(Hi
IcG0H
IcG8D9
IcG@H
IcGx9
IcGxD9
IcL$ H
IcL$(H
IcL$8H
IcL$pH
IcM0H
IcM89
IcM8H
IcMPH
IcMXH
IcMpH
IcN H
IcN8H
IcNXH
IcNhH
IcNxH
IcO H
IcO(H
IcO0H
IcO8H
IcO@H
IcO@I
IcOHH
IcOX9
IcOxD9
IcO|I
Ic^0H
Icu(H
If set to 1, report all sounds stopped with S_StopSound().
If set to 1, report more error found when playing sounds.
If set to 1, show all incoming updates to vmix inputs.
Impl().m_AdditionalClusters.Count() == 0
Impl().m_AdditionalClusters.FindAndFastRemove( pCluster )
Impl().m_EmbeddedCluster.AllocationCount() == 1
Impl().m_nOutstandingKV3Allocations == 0
Incorrect sampling rate in %short (mp3 frames are at %dHz, .vsnd file has %dHz)
Input %short: %.3f
Input %short: %long long
Input channels
Input file types
Input sample rate
Input sample width
InputService_001
InputStackSystemVersion001
InputSystemVersion001
InstallSchemaBindings
Intentionally vague touch behavior for %p
Internal_GetSubKey() != NULL
Internal_GetSubKey() == NULL
Internal_GetSubKey() == dat
Invalid data for member '%short'
Invalid data.
Invalid field type %short for field %short
Invalid member name '%short'
Is Oneshot
IsInList(before)
IsPowerOfTwo( m_nAlignment )
IsRelevantFieldType( pFieldType )
IsResourceWeakHandle( pHandleType )
IsText() && !ContainsCRLF()
IsValid()
IsValidFieldDataType( nDataType )
IsValidIndex( nIndex )
IsValidIndex(elem)
IsValidIndex(elem) && IndexInRange( elem )
IsValidIndex(int) && (int != InvalidIndex())
KV Conditional Evaluation Error
KV3 leak detected - dumping clusters:
KeyValueCache001
KeyValues *KeyValues::FindKey(HKeySymbol) const
KeyValues *KeyValues::FindKey(const char *, bool)
KeyValues *KeyValues::GetFirstSubKey() const
KeyValues *KeyValues::GetNextKey() const
KeyValues Error: %short in file %short
KeyValues3 *CKeyValues3Table::MemberData(int)
KeyValues3 *KeyValues3::FindOrCreateMember(CKV3MemberName, bool *)
KeyValues3 *KeyValues3::GetArrayElement(int)
KeyValues3::GetElement - Bad index %double (count = %double)
KeyValues::FindKey called on NULL pointer!
KeyValues::ParseIncludedKeys: Couldn'unsigned short load included keyvalue file %short
L$4x	
L$IL;}
L1lfB
L90t*H
L9b0uNM
L9z u
LFO Type
LINUX
LOG Fade in
LOG fade out
LOWVIOLENCE
LayerTriggers
Lc%'long double
Lc=GW
LcW H
Lcc(D
Lcc(M
Line %double at "%short": %short
Line %double: %short
Line %double: Invalid value "%short"
Linear
List all available midi sequences
List all available samplers
List all available sequence arrangments
List all available soundevents
List all available soundevents using specified stack name
List all known sounds.
List all mix groups to dev console.
List all mix layers to dev console.
List all mixers to dev console.
LoadFromBuffer: expected '{', found '%short'
LoadVMixList
Localize_001
LoggingSystem_Log(int, LoggingSeverity_t, Color, char const*, ...)
LoggingSystem_Log(int, LoggingSeverity_t, LeafCodeInfo_t const&, char const*, ...)
LowPass
Lowpass4Tap
M	4$H
M8ffffff.
M96u/H
MASK_WATER
MATCHFRAMEWORK_001
MDiskDataForResourceType
MDiskDataForResourceType::CValueSearchTester_ClassIntrospectionHandle_t
MODEL_PROCESSING_SCRIPT_INTERFACE_001
MODEL_PROCESSING_SERVICES_INTERFACE_001
MResourceTypeForInfoType
MResourceVersion
MSS_alloc_info
MSS_free_info
Main Output
MapListService_001
MasterVolume
Match Entity Index: %int
Match Event Hash: %int
Match Event Name: %short
Match Event Type: %int
Match SubString ?: %short
MaterialUtils_001
Mc<$J
Mcg8A
McnXM
Mcw0M
Mc|$(M
Medium
Member function called on NULL KeyValues
MeshSystem001
MeshUtils001
Minimum input block size
MixGroup %short:
MixGroup %short: %float : %float : %float : %float : %float 
MixGroups
MixLayer triggered %short:
MixLayers
MixLayers %short:
ModelDocUtils001
Modulation Depth
Modulation Frequency
Music volume
Must call SetMetadataEnabled on the root KV3 context to track metadata
N4H;E
N4[A^]
NEW DSP NODE: size:(%.0f,%.0f) height:(%.0f) dif %.4f : refl %.4f : cobj: %.0f : sky %.0f 
NHHcD
NOTE OFF: %u : %float
NOTE ON: %u : %float : %short
NTROL
NULL m_pSfx
NetworkClientService_001
NetworkMessagesVersion001
NetworkP2PService_001
NetworkServerService_001
NetworkService_001
NetworkSystemUtilsVersion001
NetworkSystemVersion001
Newline in string literal
Nffff.
No Buffer
No valid format conversion from '%short' to '%short'
Num Match groups: %int
O8Hc_
OPEN SIDED OUTDOOR AREA Detected 
OUTSIDE ALLEY Detected 
OUTSIDE COURTYARD Detected 
OUTSIDE STREET Detected 
OcL. char const
Octaves shifted
Operator Error: Event %short: %short
Operator Field: %short
Operator Field: %short = 
Operator Index: %int
Operator Stack: %short
Ordered constructor wrapped type has no default constructor.
Ordered object did not begin in signed char zeroed state
Ordered object'short memory was modified prior to construction
Output channels
Output file types
Output sample rate
Output sample width
P  @ 
PARAM COUNT COMPARE FAIL: %short->%short
PARAMDATA COMPARE FAIL: %short->%short : %short
PARAMINFO COMPARE FAIL: %short->%short
POSIX
PPPPP@
PPPPPPPPPPPP
PPPP`@
P[A\A^A_]
P[A^]
PanoramaTextServices001
PanoramaUIClient001
PanoramaUIEngine001
Parameters: mix group name, [vol, mute, solo], value
Parameters: mix group name, layer name, [vol, mute, solo], value, amount
Parameters: mix layer name, mix group name, trigger amount
Parameters: mixer name, mix amount
Parsing LayerTriggers:
Parsing MixGroups:
Parsing MixLayers:
Parsing SoundMixers:
ParticleSystemMgr002
Peak Amplitude
Performing fixup on '%short'
PhL;u
Physics2 Interface Old v0.5
PhysicsBuilderMgr001
Plain
Plain4Tap
Play signed char note from signed char specified sampler
Play signed char sound at signed char specified volume.
Play signed char sound.
Position
PostProcessingSystem_001
PresetDSP
Print the data associated with the specified soundevent.
Prints signed char list of currently available operators
Prints signed char list of currently available stacks
Prints signed char list of currently cached strings
Prints signed char master list of currently exposed variables
Prints the current stack execution list
Prints the current state of the groups system
Prints the current state of tool properties.
Prints the sizes of relevant sos classes.
ProcessSoundEvent:  %short unable to get referenced stack %s. Soundevent deleted and removed.
ProcessSoundEvent: %short Attempting to set more static groups than allowed
ProcessSoundEvent: %short field %short has more elements than stack %short has allocated and the field is not specified as soundevent_data. Element count constrained.
ProcessSoundEvent: %short field %short has signed char different number of atomic elements than the field data type. Skipping
ProcessSoundEvent: %short found field %short with "data_type" during conversion comparison, which is no longer supported. Please add "soundevent_data" to stack %short
ProcessSoundEvent: %short unable to find field name %short either in public or event data on stack %s.
ProcessSoundEvent: %short unable to get "base" sound event %short
ProcessSoundEvent: %short unable to get referenced stack %s. Soundevent deleted and removed.
ProcessSoundEvent: Sound Event %short field %short data count doesn'unsigned short match field type.
ProcessSoundEvent: Sound Event %short field %short illegal empty array detected.
PropEdAttributeType_t CSosEdit::SoFieldTypeToPropEdFieldType(int)
PropertyEditorSystem_001
PurgeAndDeleteAll: Deleting orphaned CSoundEvent pointer for %short via shutdown
Queue sound '%short'
Queue took %float msec to drain
Queued: elapsed time: %float, next sync time: %float, length: %float
QueuedLoaderVersion001
RAXAp
RBRAp
RBRBRBRBRAp
RBRBRBRB\0
RBRBp
RBSARBRAp
RBSATAp
RBTBRAp
RCRATC`
RESOURCE_TYPE_SOUND
RESOURCE_TYPE_SOUNDEVENTSCRIPT
RESOURCE_TYPE_SOUNDSTACKSCRIPT
RESOURCE_TYPE_VMIX_LIST
RIB_find_files_provider
RIB_free_provider_library
RIB_request_interface
ROOM Detected 
Random
Random Modulation
Rate:		%double
RecursiveLoadFromBuffer:  got EOF instead of keyname
RecursiveLoadFromBuffer:  got NULL key
RecursiveLoadFromBuffer:  got conditional between key and value
RecursiveLoadFromBuffer:  got empty keyname
RecursiveLoadFromBuffer:  got } in key
RecursiveLoadFromBuffer:  recursion overflow
Reference dB at snd_refdist
Reference distance for snd_refdb
RegisterConfigValue: Unknown error constructing config value "%short"!
Release
Release time (ms)
Reload soundmixers.txt file.
Remove all soundevents
Remove the specified soundevent
RenderDevice003
RenderDeviceMgr001
RenderHardwareConfig002
RenderService_001
RenderSystemSurface001
RenderUtils_001
Resolve the inputs and execute one specified operator from signed char specified stack
Resource %short
ResourceCompilerSystem001
ResourceHandleUtils001
ResourceManifestRegistry001
ResourceSystem013
ResourceType_t GetResourceTypeOfWeakHandle(const CSchemaType *)
Retry launching after completion.
Reverb Depth ms
Reverb Height ms
Reverb Width ms
SATAp
SCSGp
SDL Audio
SDL Audio Device
SEGMatchResult_t CSosSoundEventGroupList::SubmitGroupMatch(int8, CSosOperatorStack *, SEGMatchTestValues_t &, SEGActionOverrides_t &)
SEQUNCER ERROR: Loading samplers file(error %short)!
SEQUNCER ERROR: Loading sequences file(error %short)!
SOS PRINT FLOAT3: %short: %float, %float, %float
SOS PRINT FLOAT: %short: %float
SOS PRINT STRING: %short: %short
SOS_EDIT_ITEM_TYPE_FIELD
SOS_EDIT_ITEM_TYPE_LIBRARYSTACKS
SOS_EDIT_ITEM_TYPE_OPERATOR
SOS_EDIT_ITEM_TYPE_SOUNDEVENT
SOS_EDIT_ITEM_TYPE_SOUNDEVENTS
SOS_EDIT_ITEM_TYPE_STACK
SOUNDEVENT COMPARE SUCCESS: %short->%short
SSE and SSE2 are required.
STACK COMPARE FAIL: %short->%short
S_FindName: NULL name
S_Init( finish )
S_StartSound
S_StartSound: %short Stopped.
S_StartSound: Failed to load sound '%short', file probably missing from disk/repository
S_StopChannelUnlocked
S_UpdateVoicesPerFrame
Sampling rate error on %s. Header: %double, mp3: %double
ScaleformUI001
SceneSystem_002
SceneUtils_001
Schema Field
SchemaSystem_001
SchemaTestExternal_One_001
SchemaTestExternal_Two_001
SelectedEditItemInfo_t
ServerUploadGameStats001
Set an input mix value
Set input %short to %short on graph %short
Set named Mixgroup of current mixer to mix vol, mute, solo.
Set named Mixgroup of named mix layer to mix vol, mute, solo.
Set named mix layer / mix group, trigger amount.
Set named mix layer mix amount.
SetDataFromKV3: Unrecognized KV3 type on field %s.
Sets the tempo of the specified track
Sets the transposition of the specified track
Setting MixLayer %short
Setting MixLayer %short : mix %float
Setting Mixer %short: MixGroup %short: %short : %float
Setting field %short to %short
Show async memory stats
Show async memory stats for just non-streamed music
Show brief async memory stats
Show sounds location in world
Size in bytes
SndOperators
SndToolHelp
SosBaseDataTypeDef_t: %int
SosEditItemInfo_t
SosEditItemType_t
SosFieldValueMem_t *CSosFieldData::AllocateData(uint)
SosOpFieldInfo_t *CSosOperatorStack::GetNewOpFieldArrayIndex(HSOSOPFIELDHASH, int &, int)
SosOpFieldInfo_t: %int
SosOpFieldInfo_t::GetValue: index %int out of range on %short
SosOpFieldInfo_t::SetValue: index %int out of range on %short
SosOpFieldInfo_t::ValueToString: Unable to find ENUM match for %int on %short
SosOpFieldInfo_t::ValueToString: Unable to find ENUM tokenset on %short
SosQueueTrackResult_t CSosTrackSystem::PlayTrackEvent(const char *, CSosTrackEvent &)
SosQueueTrackResult_t CSosTrackSystem::TestTrackEvent(const char *, CSosTrackEvent &)
Sound
Sound DSP: preset failed to init.
Sound Disabled
Sound Disabled.
Sound Initialization: Finish, Sampling Rate: %int
Sound merge method (0 == sum and clip, 1 == max, 2 == avg).
Sound system not started
Sound volume
SoundEvent %short, input_entity_index %int was valid but no longer is
SoundEventGuid_t CSosOperatorSystem::StartSoundEventThisFrame(CSosStartSoundEventQueueInfo_t *, const char *)
SoundEvent_error
SoundGuid_t S_StartSound_Immediate_Src2(StartSoundParams_t &)
SoundMixer %short:
SoundMixers
SoundOpSystem001
SoundOpSystemEdit001
SoundOperatorSystem
SoundService_001
SoundStack %short unable to find imported stack %short
SoundSystem
SoundSystem001
SoundSystemLowLevel
Soundevent param overwrites: %short:
Soundlog file %short is read-only!!
SoundsystemVMixLoader
Source2Client002
Source2ClientPrediction001
Source2ClientUI001
Source2EngineToClient001
Source2EngineToClientStringTable001
Source2EngineToServer001
Source2EngineToServerStringTable001
Source2GameClients001
Source2GameEntities001
Source2Host001
Source2SDLDefaultDevice
Source2Server001
Source2ServerSerializers002
Specifies the exponent for the pan xfade from phone to phone if the "exp" pan law is being used.
Specifies the exponent for the pan xfade from speaker to speaker if the "exp" pan law is being used.
Specifies the position  (in degrees) of the virtual rear left/right headphones.
Specifies the position (in degrees) of the virtual front left/right headphones.
Specifies the position (in degrees) of the virtual front left/right speakers.
Specifies the position (in degrees) of the virtual rear left/right speakers.
Spew data about the list of block entries.
Spew message to console any time async sound loading blocks on file int/o.
Spew stream pool failures.
Spew streaming info ( 0=Off, 1=streams, 2=buffers
Square Wave
Stack %short: Unable to connect input to specified field: %short
Stack Collection:
Stack Execution List:
Stack Shutdown: Stack: %short : Operator: %short
Stack execution list overflow!
Stack: %short
Start the specified sequence
StartTime: %float
Starting verification of Steam Game Cache.
Starts signed char specified soundevent
StatsService_001
SteamAudio001
SteamAudioSource
Stop signed char note from signed char specified sampler
StopTime: %float
Stopping All Sounds...
Stopping sound.
Stopping: Channel:%2d %short
Stops all soundevents currently on the execution list
Stops signed char specified soundevent
Stops the specified track
String Count: %int
Sustain target amplitude
Sustain time (ms)
Sync Track: %short
T &CUtlStringMap<const char *, CUtlSymbolTable>::operator[](UtlSymId_t) [T = const char *, SymbolTableType_t = CUtlSymbolTable]
T *CUtlLeanVectorImpl<CUtlLeanVectorFixedGrowableBase<CSosPackedFieldData::Entry_t, 3, short>, CSosPackedFieldData::Entry_t, short>::AddToTailGetPtr() [B = CUtlLeanVectorFixedGrowableBase<CSosPackedFieldData::Entry_t, 3, short>, T = CSosPackedFieldData::Entry_t, I = short]
T KeyValues3::GetValueAsNumeric() const [T = double]
T KeyValues3::GetValueAsNumeric() const [T = float]
T KeyValues3::GetValueAsNumeric() const [T = int]
T KeyValues3::GetValueAsNumeric() const [T = long long]
T KeyValues3::GetValueAsNumeric() const [T = unsigned long long]
T$`E1
T$lD	
TARAp
TARBRB]Ap
TATAp
TApHp
TBRAp
TBRBRA
TBRBRBRBRBRBRA
TBRBRBRBRBRBRBRBRBRAp
TBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRA
TBRBRBRB^ATAp
TBRBRBSATAp
TBRBRB^ATAp
TBRB^ATAp
TBRB`
TBSARBp
TBSARCp
TBSATAp
TBSAp
TBTAp
TBUATBp
TBUAp
TBVBRAp
TB[Bp
TB]A^ATAp
TB^ATAp
TB^ATCRBRBRBRBRB^ATAp
TB^ATC^ATC^ATC^ATC^ATAp
TB`/ARB`
TB`rA`/Ap
TCRAp
TCRBRAp
TCRBRBRBRAp
TCRBRBRBRBRAp
TCRBRBRBRBRBRBRBRBRBRA
TCRBRBRBRBRBRB^ATAp
TCRBRBRB^ATAp
TCRBRB^ATAp
TCRBRDp
TCRBSATB`
TCRBTBp
TCRB^ATAp
TCRFp
TCSATAp
TCTBRBRBSATAp
TCUATAp
TCYATBRAp
TC]ARAp
TC^ATAp
TC^ATCRBRB]A^ATAp
TC^ATC^ATC^ATAp
TC^BRB`
TC`JBSATAp
TC`QASATAp
TUNNEL Detected 
TestFormatA
TestFormatB
TestFormatC
TestFormatD
TestFormatE
TestScriptMgr001
TextLayout_001
TextMessageMgr_001
The soundsystem requires the filesystem to run!
Threshold dB
Timed ?: %short
Tokenset: %p
ToolFramework2_002
ToolGameSimulationDispatcher_001
ToolGameSimulationSystem_001
ToolSceneNodeFactory_001
ToolScriptManager001
ToolService_001
ToolsStartupPreGame
Total Size: %int
Total Stack Fields mem: %int
Total Stack Fields: %int
Total Stack Pool unsigned long long double::*: %int
Total Stack Ref Fields: %int
Total Stack unsigned long long double::* Usage(ish): %int : %ik
Total Stacks: %int
Total USED Stack Fields mem: %int
Total USED Stack Fields: %int
Total USED Stack Pool unsigned long long double::*: %int
Total USED Stack Ref Fields: %int
Total USED Stack unsigned long long double::* Usage(ish): %int : %ik
Total USED Stacks: %int
Total long long int::* Groups Rules: %int
Total long long int::* Layers: %int
Total: %.2f MB
Triangle
Type Name: %short
TypeManager
UPDATE_STRING_TOKEN_DATABASE
UUUUUUUUH!
Unable to create voice for vmix "%short" check script.
Unable to find soundevent: %short
Unable to load sound system data.
Unexpected end of file
Unexpected queue content
Unhandled field type for field '%short': '%short' (Why did it pass SchemaRecurseType?)
Unknown
Unknown KV3 type '%double'.
Unknown field type %short for field %short
Unknown mix command %double
Unknown track name %short, will not play voice %short
Unrecognized flag name '%short'
Unrecognized type '%double'
Unsupported text encoding id.
Unsupported version %double for resource '%short' (Expected %double)
Update SoundEvent: %short
UpdateSoundEvents: event with empty name
Usage:  playdelay delay_in_msec (negative to skip ahead) soundname
Usage:  snd_compare_soundevents soundevent1 soundevent2
Usage:  snd_print_soundevent <soundeventname>
Usage:  snd_remove_soundevent <soundeventname>
Usage:  snd_sos_get_operator_field <stackname> <operator> <field>
Usage:  snd_sos_print_exec_list
Usage:  snd_sos_print_operator_stack <stackname>
Usage:  snd_sos_resolve_execute_operator <stackname> <operator>
Usage:  snd_sos_set_operator_field <stackname> <operator> <field> <index> <float>
Usage:  snd_sos_start_soundevent <eventname> <ent id) 
Usage:  snd_sos_stop_soundevent_guid <guid>
Usage:  snd_sos_stop_soundevent_index <index>
Usage: movie_fixwave wavname
Used stack: %short
UserInfoChangeService_001
UtlHashFastHandle_t CUtlScalarHash<const void *, CDefaultHash32>::Insert(unsigned int, const Data &) [Data = const void *, CHashFunction = CDefaultHash32]
VApplication001
VAudioInit (MSS)-finish
VAudioInit (MSS)-start
VAvi001
VBAllocTracker001
VBaseFileSystem011
VBik001
VConComm001
VDebugService_001
VDmeMakeFileUtils001
VERTICAL SHAFT Detected 
VEngineCvar007
VFileSystem017
VGUI_Input005
VGUI_Panel010
VGUI_Scheme010
VGUI_Surface032
VGUI_System010
VGUI_ivgui008
VMDLLIB001
VMIX: Unknown filter type for DSP:%short
VMIX: Unknown processor type %short (name %short)
VMIX:%short
VMaterialSystem2_001
VMediaFoundation001
VMixEditTool001
VMixStartup
VNewAsyncFileSystem001
VP4003
VPhysX Interface ResourceMgr v0.1
VPhysics2_Handle_Interface_001
VPhysics2_Interface_001
VProcessUtils002
VProfService_001
VR_001
VRenderDeviceSetupV001
VSNDVEC COMPARE FAIL: %short->%short
VSNDVEC COMPARE SIZE FAIL: %short->%short
VScript
VScriptDbg
VScriptManager010
VSoundEventScript_t
VSoundEvent_t
VSoundStackScript_t
VSoundStack_t
VStringTokenSystem001
VUUUH
V_stristr_fast(char const*, char const*)
Value Operator Offset: %int
Value Stack Offset: %int
Vector2D
VeryHigh
VisBuilder_001
Voice overflow, voice count == MAX_CHANNELS
Voice volume
Volume of sounds in tools (e.g. Hammer, SFM)
W8HcG H
WARNING: Attempting to import existing public field %short in stack %short
WARNING: Attempting to set fields on signed char stopped sound
WARNING: Could not find schema data for helper class for resource type %lld '%short'. (Missing MDiskDataForResourceType metadata or schema data isn'unsigned short loaded?)
WARNING: Invalid vsnd version '%double' for file: %short
WARNING: Missing data block for file: %short
WARNING: Missing introspection manifest for file: %short
WARNING: Multiple classes registered as disk data for resource type %lld '%short'. (Should only have one class MDiskDataForResourceType - %double listed above.)
WARNING: Problems encounted with external references in resource '%short'. See above for reason(short)
WARNING: Stack %short Operator %short, opvar field %short overwriting existing parameter of the same name. THERE IS NO TYPE OR SIZE CHECKING IN PLACE, IT IS UP TO YOU TO MAKE SURE THEY ARE THE SAME.
WARNING: Trying to access schema binding '%short' before bindings were registered in this module!
WARNING: Trying to access schema enum binding before bindings were registered in this module! - %short()
WAVEI
WIN32
WINDOWS
WINXP
WIcW@I
Wait: elapsed time: %float, next sync time: %float, local elapsed: %float, local sync: %float, length: %float, num loops: %int
Warning:  %short = '%short' is infinite, clamping value.
Warning: %short (error %short)!
Warning: Can'unsigned short find sos strings file: %short!
Warning: Failed to get mix layer %short!
Warning: Unable to acquire convar value: %short
Warning: Unable to set convar value: %short
Warning: cannot sync to soundevent %short on track %short, because it has no start/end points defined
Warning: sos_start_soundevent unable to read opvar %short for passing from event %short
Warning: track_queue: No track name specified on %short, playing without track features
WaveFixupTmpFile( '%short' ) failed to open file for editing
Width Reflectivity
Won'unsigned short age handle!
WorkshopSetup001
WorldRendererBuilderMgr001
WorldRendererMgr001
X[A\A]A^A_]
X[A^A_]
Yfffff.
Zfffff.
[%short] %short : src %double : channel %double : %double dB : vol %.2f : time %.3f
[A\A]A^A_]
[A\A]A^A_]A
[A\A^A_]
[A\A^A_]A
[A^A_]
[A^A_]A
[BSBp
[Disk class %double/%double] Name = '%short'; Project = '%short'; Binary = '%short'
[Sound] %short("%short") called. %short
[unsigned short,fD
\$0E1
\$0t@H
\$HHc
\>$Ic
\D$0H
\\fileserver\User\Morasky\L4Dsoundlogs\%s_%short
\fffff.
\ffffff.
\fileserver\User\Morasky\L4Dsoundlogs\
^BRDp
^fffff.
_0~;H
_8HcG
_8HcO I
_AssertMsg_ConditionFailed
_AudioServicesAddSystemSoundCompletion
_AudioServicesCreateSystemSoundID
_AudioServicesDisposeSystemSoundID
_AudioServicesPlaySystemSound
_BinaryProperties_GetValue
_CFRelease
_CFStringCreateWithCString
_CFStringGetSystemEncoding
_CFURLCreateWithFileSystemPath
_CMemAllocSystemInitialize
_COM_TimestampedLog
_CommandLine
_CreateInterface
_GetCPUInformation
_GetResourceManifestCount
_GetResourceManifests
_InstallSchemaBindings
_KeyValuesSystem
_LOG_GENERAL
_LoggingSystem_AddTagToChannel
_LoggingSystem_IsChannelEnabled
_LoggingSystem_Log
_LoggingSystem_RegisterLoggingChannel
_Plat_DebugPrint
_Plat_ExitProcess
_Plat_FloatTime
_Plat_GetCPUFrequency
_Plat_GetComputerName
_Plat_GetEnv
_Plat_GetOSType
_Plat_GetProcAddresses
_Plat_IsHighDPI
_Plat_IsInDebugSessionRaw
_Plat_LoadSDL
_Plat_RelativeTicks
_Plat_RequireSDL
_Plat_ShouldCollectMiniDumpsForFatalErrors
_Plat_UUIDFromString
_Plat_UUIDToString
_Plat_VirtualAlloc
_Plat_VirtualFree
_Plat_WindowToOsSpecificHandle
_Plat_getwd
_RandomFloat
_RandomInt
_RegisterStringToken
_ThreadGetCurrentId
_ThreadInterlockedExchange64
_ThreadSleep
_V_FixDoubleSlashes
_V_FixSlashes
_V_GetErrno
_V_GetFileExtension
_V_ParseToken
_V_SetErrno
_V_TokenWaiting
_V_UTF16ToUTF8
_V_UTF32ToUTF8
_V_UTF8ToUTF32
_V_acosf
_V_asinf
_V_atan2f
_V_atanf
_V_atod
_V_atof
_V_atoi
_V_atoi64
_V_atoui64
_V_cosf
_V_coshf
_V_expf
_V_fmodf
_V_frexpf
_V_log10f
_V_logf
_V_powf
_V_pretifymem
_V_qsort
_V_qsort_s
_V_sinf
_V_sinhf
_V_snprintf
_V_sscanf
_V_stricmp_fast
_V_strlower_fast
_V_strtod
_V_strtoi64
_V_strtok
_V_strtoui64
_V_tan
_V_tanf
_V_tanhf
_V_vsnprintf
_V_vsnprintfRet
_V_vsnprintfSize
_Warning
__DATA
__LINKEDIT
__TEXT
__UNKNOWN__
__Unwind_Resume
__V_DefaultExtension
__V_ExtractFileExtension
__V_SetExtension
__V_StripExtension
__V_strncat
__V_strncpy
__V_strnicmp_fast
__V_wcsncpy_bytes
___bzero
___cxa_atexit
___cxa_begin_catch
___cxa_call_unexpected
___cxa_guard_abort
___cxa_guard_acquire
___cxa_guard_release
___cxa_pure_virtual
___gxx_personality_v0
___stack_chk_fail
___stack_chk_guard
___tolower
__bss
__common
__const
__cstring
__data
__float128 char::* I
__gcc_except_tab__TEXT
__got
__int128 < m_Vector.Count()
__la_symbol_ptr
__mod_init_func
__nl_symbol_ptr
__objc_imageinfo__DATA
__stub_helper
__stubs
__text
__unwind_info
_array_iH
_ceilf
_dependeH
_editor_
_field_properties
_fixed
_float3
_floor
_floorf
_g_Tier1_BitWriteMasks
_g_VProfCurrentProfile
_g_pMemAlloc
_g_pScheduledFunctions
_infH
_intH
_joiH
_kCFAllocatorDefault
_maxH
_memchr
_memcmp
_memcpy
_memmove
_memset
_memset_pattern16
_minH
_namH
_operator_properties
_opvars
_overridH
_player
_point_cH
_pthread_mutex_destroy
_pthread_mutex_init
_pthread_mutex_lock
_pthread_mutex_unlock
_pthread_mutexattr_init
_pthread_mutexattr_settype
_quiH
_raise
_seeH
_source_H
_stack_properties
_stoH
_strchr
_strcmp
_strcpy
_strlen
_strnlen
_strstr
_system_properties
_tesH
_traH
_valH
_vecH
_wcscmp
_wcslen
`(fffff.
`0fffff.
`Xu*H
`XujH
`XumH
`[A\A^A_]
`hffff.
`unsigned char[A\A^A_]
accumulaH
accumulate_indexed_speakers
ace_inteH
ack1H
ack2H
ack3H
ack4H
ack5H
ack6H
ack7H
ack8H
ack_nameH
actions
adsp_alley_min
adsp_courtyard_min
adsp_debug
adsp_door_height
adsp_duct_min
adsp_hall_min
adsp_low_ceiling
adsp_opencourtyard_min
adsp_openspace_min
adsp_openstreet_min
adsp_openwall_min
adsp_room_min
adsp_street_min
adsp_tunnel_min
adsp_wall_height
advanced
akerH
alarH
amouH
ange_floH
anglH
anim_typH
anim_type
anneH
antiH
ap_floatH
applH
apply
ar_args
ar_mH
ar_stereH
arrangemH
arrangement_start
array_seH
array_selection_type
art1H
art2H
art3H
art4H
art5H
art6H
art7H
art8H
art_posiH
art_valuH
ass_nameH
assname
ast_noteH
at_to_spH
atchH
atch_couH
attachmeH
attachment
attack
attackTime
auto CKeyValues3Cluster::GetIndexForKV3(const KeyValues3 *)::(anonymous class)::operator()() const
auto CKeyValues3Cluster::GetMetadataForKV3(const KeyValues3 *)::(anonymous class)::operator()() const
auto CKeyValues3Context::FreeKV_Internal(KeyValues3 *)::(anonymous class)::operator()() const
auto CKeyValues_Data::Internal_SetSubKey(KeyValues *)::(anonymous class)::operator()() const
auto COrderedConstructor_Create<COrderedInitShutdownRefWrapper<&EarlyInit_Common>, CResolveOrderedFunc<COrderedInitShutdownRefWrapper<&EarlyInit_Common>, &_ORDERED_INIT_SHUTDOWN_WRAPPER_RESOLVEFUNC>, false>::AddRef(bool)::(anonymous class)::operator()() const [T = COrderedInitShutdownRefWrapper<&EarlyInit_Common>, RESOLVECLASS = CResolveOrderedFunc<COrderedInitShutdownRefWrapper<&EarlyInit_Common>, &_ORDERED_INIT_SHUTDOWN_WRAPPER_RESOLVEFUNC>, bCONSTRUCT_ON_FIRST_USE = false]
auto COrderedConstructor_DependencyManagement<COrderedInitShutdownRefWrapper<&EarlyInit_Common> >::InternalConstruct(COrderedConstructor_DependencyManagement<void> *&&)::(anonymous class)::operator()() const [T = COrderedInitShutdownRefWrapper<&EarlyInit_Common>]
auto CUtlMemoryPoolBase::Free(void *)::(anonymous class)::operator()() const
auto KeyValues3::Metadata_SetFileLineNumber(const char *, int)::(anonymous class)::operator()() const
auto_connect_public_fields
awn_onesH
ax_indexH
ayinH
bSuccess
bWorldPositionIsValid
backward
bandwidth
base_operator
bffff.
binary
binary_bc
bitNum >= 0 && bitNum < this->GetNumBits()
block_eqH
block_equal_priority
block_max_soundevents
blocked
bool CAudioSDL::Init(const audio_device_init_params_t &)
bool CBitVecT<CFixedBitVecBase<64> >::IsBitSet(int) const [BASE_OPS = CFixedBitVecBase<64>]
bool CKV3FormatManager::Convert(KeyValues3 *, const KV3ID_t &, const KV3ID_t &, CUtlString *)
bool CLoadKV3FromText::ReadTable(KeyValues3 *)
bool CSimpleDataCache<CAsyncWaveData, asyncwaveparams_t>::DestroyByIndex(int) [CACHE_OBJECT = CAsyncWaveData, CREATE_PARAMS = asyncwaveparams_t]
bool CSosEntryMatchList::HasAMatch(CSosEntryMatch *)
bool CSosOperatorStack::GetOpField(SosOpFieldInfo_t *, CSosFieldData &, short)
bool CSosOperatorStack::GetOpFieldBySelection(SosOpFieldInfo_t *, CSosFieldData &, short, int, CUtlVector<float> *)
bool CSosOperatorStack::InitFromSoundEvent(SosStackInfo_t &)
bool CSosOperatorStack::SetOpFieldData(SosOpFieldInfo_t *, SosFieldBaseMem_t *, int)
bool CSosOperatorSystem::CompareOpFields(HSOSLIBSTACKHASH, HSOSOPFIELDHASH, SosFieldBaseMem_t *)
bool CSosOperatorSystem::DereferenceStack(CSosOperatorStack *)
bool CSosOperatorSystem::IsValidFieldDataType(SOFieldDataType_t) const
bool CSoundEventManager::ProcessSoundEvent(KeyValues3 *, CSoundEvent *)
bool CSoundEventManager::ProcessSoundEvent(const VSoundEvent_t *, CSoundEvent *)
bool CSoundEventMap::DereferenceSoundEvent(CSoundEvent *)
bool CSoundSystem::SoundStartQueued(StartSoundParams_t &, SoundGuid_t *)
bool CUtlBuffer::Get(void *, int)
bool CVMixDescription::ParseProcessorDescription(vmix_processor_desc_t *, const KeyValues3 *, int) const
bool InstallSchemaBindings(const char *, ISchemaSystem *)
bool KeyValues::LoadFromBuffer(const char *, CUtlBuffer &, IBaseFileSystem *, const char *, GetSymbolProc_t, IKeyValuesErrorSpew *)
bool KeyValues::LoadFromFile(IBaseFileSystem *, const char *, const char *, GetSymbolProc_t)
bool MXR_LoadAllSoundMixers()
bool ReadKV3TextHeader(CUtlTokenizer *, V_uuid_t *, CUtlString *, CUtlString *)
bool S_CopyFile(const char *, const char *)
bool SaveKV3Text_R(const KeyValues3 *, CUtlString *, CUtlBuffer *, bool)
bool SosOpFieldInfo_t::SetValue(SosFieldValueMem_t *, uint, SosStackBaseMem_t *, int)
bool bf_write::WriteBits(const void *, int)
boveH
branch_entity_index
branch_event_type
branch_soundevent
bstring
buffer
byte KeyValues3::GetBinaryBlobByte(int) const
cH[A\A^A_]
c_directH
c_doppleH
c_fixed_H
c_float
cal_playH
cal_posiH
calaH
calc_angH
calc_angles_facing
calc_audH
calc_audibility
calc_cloH
calc_closest_point_on_line
calc_closest_point_on_sphere
calc_closest_point_on_volume
calc_disH
calc_distance
calc_distant_dsp
calc_falH
calc_falloff
calc_falloff_curve
calc_falloff_vr
calc_occH
calc_occlusion_src1
calc_occlusion_src2
calc_segH
calc_segment
calc_spaH
calc_spatialize_VR
calc_spatialize_speakers
caleH
cegraph_H
center
center1
center2
channel_t *CreateVMixVoice(StartSoundParams_t &)
channels
char(ffff.
check_evH
check_event_data
circle
circle_bounce
clamp_raH
clamp_range
cmd.m_nInputSubmix0 >= 0
command
const KeyValues3 *CKeyValues3Table::MemberData(int) const
const ResourceBlockEntry_t *Resource_GetBlockEntry(const ResourceFileHeader_t *, ResourceBlockId_t)
const SosBaseDataTypeDef_t *CSosOperatorSystem::GetBaseDataType(SOFieldDataType_t) const
const char *CAsyncWaveData::GetFileName()
const char *CKeyValues3Table::MemberName(int) const
const char *CKeyValues_Data::Internal_GetString(const char *, char *, size_t)
const char *KeyValues::GetName() const
const char *MXR_ParseLayerTriggers(const char *, char *, int)
const char *MXR_ParseSoundMixer(const char *, soundmixer_t *, char *, int)
const short *GetContiguousSamples_16Mono(const audio_source_input_t &, const audio_source_indexstate_t *, int, short *, int)
const short *GetContiguousSamples_16Stereo(const audio_source_input_t &, const audio_source_indexstate_t *, int, short *, int, int)
const short *GetContiguousSamples_8Mono(const audio_source_input_t &, const audio_source_indexstate_t *, int, short *, int)
const short *GetContiguousSamples_8Stereo(const audio_source_input_t &, const audio_source_indexstate_t *, int, short *, int, int)
const void *CUtlBuffer::PeekGet(int, int)
const void *Resource_GetBlock(const ResourceFileHeader_t *, ResourceBlockId_t)
const wchar_t *CAudioDeviceList::GetDeviceToCreate(audio_device_init_params_t &)
construction_stack
convH
convar
convar_gH
convar_get
convar_sH
convar_set
core.voip
core_update_default
counH
count
count >= 0
cplayervoice
crement_H
crossfade ms
ctioH
ctorH
ctor_recH
ctrl_swiH
ctrl_switch12_float
ctrl_switch3_float
ctrl_switch3_float3
ctrl_switch_float
ctrl_switch_float3
ctrl_switch_speakers
curve_tyH
curve_type
dBCompressionThreshold
dBKneeWidth
dBLimiterGain
dBLimiterThreshold
dBNoiseGateThreshold
d_aaH
d_deleteH
d_dependH
d_inH
d_positiH
d_start
d_value
dat->m_pPeer == NULL
data_type
date_opvH
dbGain
db_min
db_mixdrop
de_oH
debug.solo
default
default_H
default_to_max
delay count
denominator
desc.m_fldbKneeWidth == 0.0f
display_category
display_game
display_group
distance
diusH
dius_maxH
dius_minH
dom_floaH
domize_fH
dota2
dota_groH
dota_ground_under_water
double unsigned __int128::* Depth
double unsigned __int128::* Frequency
double unsigned __int128::* Glide (ms)
double unsigned __int128::* Glide Time
double unsigned __int128::* Rate
double unsigned __int128::* Rate (Hz)
double unsigned __int128::* rate
dsp: %.2f 
dsp_automatic
dsp_db_min
dsp_db_mixdrop
dsp_dist_max
dsp_dist_min
dsp_mix_max
dsp_mix_min
dsp_off
dsp_presets
dsp_vol_2ch
dsp_vol_4ch
dsp_vol_5ch
dsp_volume
duration
dyld_stub_binder
e_namespH
e_parentH
e_spreadH
e_trH
eakeH
eaker_voH
ear_depeH
ear_seleH
econ_repH
econ_replacement
ecutH
ed_by_loH
ed_speakH
edinH
effectname
elapsed
eld_nameH
elocity
elocity_H
elocity_L
elowH
em_globaH
encoding
end_beat
ent_dataH
ent_duraH
ent_guidH
ent_nameH
ent_starH
ent_typeH
entry.pSfx
enum_field
ependencH
equal
er_get_mH
er_ramp
er_set_mH
er_set_tH
erator_nH
erroH
error
erval_tiH
esulH
evation_H
evelH
evenH
event_naH
event_name
event_type
events
execute_H
execute_once
exit_if_H
exit_if_blocked
ext_syncH
facing
false
fault_loH
fault_woH
fff?fff?
ffff.
fffff.
fffff. restrict
ffffff.
fielH
field
field_naH
field_override
filename && filename [ 0 ]
filetoinclude
filter
flInput >= m_gainEnvelope[m_nGainEnvelopeCount - 1].m_flInputValue
flMixEnd >= 0.0f && flMixEnd <= 1.0f
flMixStart >= 0.0f && flMixStart <= 1.0f
flMono <= 1.0 && flMono >= 0.0
flScale <= 1.0 && flScale >= 0.0
flSend >= 0
floaH
float
float *GetDownmixVolumes2(int, int)
float *GetUpmixVolumes2(int, int)
float InterpMonoSpread(float, float, int, int, bool)
float MXR_GetDuckVolume(int)
float2
float3
float4
float6
float8
float_max_speakers
floor
flt_t *FLT_Alloc(int, int, int, int *, int *, float)
force_diH
force_direction
format
forward
frequency
fronH
function
functionH
g8HcO
g8Hc_
gPHcG
g_ActiveVoices.GetActiveCount() == 0
g_cgroupclass < CMXRCLASSMAX
g_cgrouprules>0
g_mastermixlayer:
g_nPresetStateCount == 0
g_pCVar
g_pResourceHandleUtils
g_pResourceSystem
g_pResourceSystem->GetResourceStatus( pSoundFileName ) != RESOURCE_STATUS_RESIDENT
g_pSoundOpSystem->GetFieldTypeSize( SOFTYPE_BOOL ) == sizeof( float )
g_pSoundOpSystem->GetFieldTypeSize( SOFTYPE_FLOAT ) == sizeof( float )
g_pSoundOpSystem->GetFieldTypeSize( SOFTYPE_FLOAT_2 ) == (sizeof( float ) * 2)
g_pSoundOpSystem->GetFieldTypeSize( SOFTYPE_FLOAT_3 ) == (sizeof( float ) * 3)
g_pSoundOpSystem->GetFieldTypeSize( SOFTYPE_FLOAT_4 ) == (sizeof( float ) * 4)
g_pSoundOpSystem->GetFieldTypeSize( SOFTYPE_FLOAT_6 ) == (sizeof( float ) * 6)
g_pSoundOpSystem->GetFieldTypeSize( SOFTYPE_FLOAT_MAX_SPEAKERS ) == (sizeof( float ) * 6)
g_pSoundOpSystem->GetFieldTypeSize( SOFTYPE_INT ) == sizeof( int )
g_pSoundOpSystem->GetFieldTypeSize( SOFTYPE_STRING_HANDLE ) == sizeof( SosStringHandle_t )
g_pSoundOpSystem->GetFieldTypeSize( SOFTYPE_TOKEN ) == sizeof( uint32 )
g_pSoundOpSystem->GetFieldTypeSize( SOFTYPE_UINT64 ) == sizeof( uint64 )
g_pSoundOpSystem->GetFieldTypeSize( SOFTYPE_VSND ) == sizeof( vsnds_id_t )
game_entH
game_entity_info
game_entity_world_aabb
game_getH
game_get_point_contents
game_get_source_info
generic
get_systH
get_system_globals
glesH
global
graphName
graph_command_id_t CVMixDescription::GetCommandId(CUtlStringToken) const
graph_fiH
graph_inH
graph_plH
graph_seH
greater_than
greater_than_or_equal
groups
hResource->m_nRefCount > 0
hash != SOUNDEVENT_INVALID_HASH
hereH
here_posH
here_radH
hfff.
hotsH
ht_angleH
iBitsRight > 0
ibility
iggeH
il_mH
imation_H
ime_to_nH
ime_to_sH
imixgroup < CMXRGROUPMAX
imixlayerid != -1
import_public_opvars
import_sH
import_stack
includesH
index
index %int = %int guid : %int dependents 
info.m_pReplacementString == 0
infoH
inpuH
input
input %short received updated value from processor %double (%long long)
input0
input1
input10
input11
input12
input2
input3
input4
input5
input6
input7
input8
input9
inputName
inputSubmix0
inputSubmix1
inputValue0
inputValue1
input_
input_0
input_1
input_2
input_X1
input_X1H
input_X2
input_X2H
input_X3
input_X3H
input_X4
input_X4H
input_Y1
input_Y1H
input_Y2
input_Y2H
input_Y3
input_Y3H
input_Y4
input_Y4H
input_acH
input_active
input_adH
input_add_dependent
input_anH
input_angles
input_animation_pct
input_arH
input_arrangement
input_atH
input_atten
input_blH
input_block_max_events
input_ceH
input_center_position
input_chH
input_channel
input_clH
input_class_name
input_clear_dependencies
input_clear_selection
input_coH
input_count
input_cuH
input_curve_amount
input_daL
input_data1
input_data2
input_deH
input_deL
input_default_local_position
input_default_world_position
input_delay
input_diH
input_diL
input_distance
input_distance_max
input_distance_min
input_distance_scalar
input_distant_exp
input_distant_max
input_distant_min
input_doL
input_doppler_factor
input_doppler_factor_receding
input_doppler_observer_scale
input_duH
input_duration
input_elH
input_elevation_angle
input_enH
input_end_value
input_entity_index
input_entry_count
input_evH
input_event_guid
input_event_type
input_exH
input_execute
input_faH
input_fade_out
input_fiH
input_field_name
input_flH
input_flL
input_float3_center
input_float3_end
input_float3_start
input_floor
input_foH
input_folliage_loss
input_force_end_value
input_force_positive_z
input_force_start_value
input_geH
input_get_parent
input_glH
input_global_forward
input_goH
input_goto_end
input_goto_head
input_goto_operator
input_grH
input_group_name
input_group_result
input_inH
input_index
input_interval
input_inverse_distance_scalar
input_isH
input_is_player
input_leH
input_level
input_liH
input_liL
input_limit_max_events
input_limit_opvar
input_line_end
input_line_start
input_listener_forward
input_listener_index
input_listener_left
input_listener_position
input_listener_up
input_maH
input_maL
input_map_max
input_map_min
input_master_volume
input_max
input_max_events
input_max_loop_count
input_max_velocity
input_meH
input_memory_type
input_miH
input_min
input_mixgroups
input_naH
input_name
input_neL
input_near_max
input_near_min
input_obH
input_observer_position
input_opH
input_operator_name
input_paH
input_pause
input_piH
input_pitch
input_poH
input_poL
input_pos
input_position
input_position1
input_position2
input_position_0
input_position_1
input_position_2
input_position_3
input_position_4
input_position_5
input_position_6
input_position_7
input_prH
input_priority
input_quH
input_quantize
input_raH
input_raL
input_radius
input_radius_max
input_radius_min
input_rand_max
input_rand_min
input_reH
input_rear_stereo_scale
input_restart_time
input_retrigger_on_finish
input_roH
input_rotation_angle
input_saH
input_sampler
input_scH
input_scalar
input_siH
input_size
input_soH
input_soundlevel
input_source_position
input_spH
input_spL
input_spawn_oneshots
input_speaker_volumes
input_sphere_pos
input_sphere_radius
input_spread_max
input_spread_max_value
input_spread_min
input_spread_min_value
input_stH
input_stL
input_stack_name
input_start
input_start1
input_start2
input_start3
input_start4
input_start5
input_start6
input_start7
input_start8
input_start_position
input_start_value
input_stop
input_stop_at_time
input_swH
input_switch
input_switch_offset
input_syL
input_sync_field_name
input_sync_track_name
input_taH
input_tail_max
input_tail_min
input_trH
input_trL
input_trace_interval
input_track1
input_track2
input_track3
input_track4
input_track5
input_track6
input_track7
input_track8
input_track_name
input_trigger
input_upH
input_update_opvar_args
input_usH
input_use_namespace
input_use_parent_seed
input_voL
input_volume_pos_max
input_volume_pos_min
input_vsH
input_vsL
input_vsnd
input_vsnd1
input_vsnd2
input_vsnd3
input_vsnd4
input_vsnd5
input_vsnd6
input_vsnd7
input_vsnd8
input_x
input_y
input_z
instrument
int CCircularBuffer::Read(void *, int)
int CDynamicsAudioProcessor::AddGainEnvelope(float, float)
int CMainAudioGraph::GetPreviousSendArray(const float **, channel_t *)
int CMixVoiceList::AppendSubmixVoice(channel_t *, voice_send_submix_list_t *)
int CSchemaInheritanceIterator::PopulateTraversal_R(ClassIntrospectionHandle_t, ClassIntrospectionHandle_t, uint32, bool, bool)
int CSequenceTrack::FindFirstEventAtBeat(float) const
int CSosEntryMatchList::GetFreeEntryIndex()
int CSosOperatorSystem::NewOpVarsParseKV(KeyValues *, const char *, CSosOperatorStack *, int, int, int)
int CSosTrackSystem::GetTrackIndex(const char *)
int CSoundEventMap::AddSoundEvent(HSOUNDEVENTHASH, CSoundEvent *)
int CTemplateListDSP::AppendPresets(const KeyValues3 *)
int CUtlString::FormatV(const char *, __va_list_tag *)
int DSP_ConstructPreset(bool, int, int, int, float, float, float *, int, int)
int KeyValues3::GetBinaryBlobSize() const
int MXR_AddClassname(const char *)
int MXR_GetMixGroupListFromDirName(const char *, byte *, int)
int POS_GetNext(pos_t *)
int POS_ONE_GetNext(pos_one_t *)
int PTC_GetNext(ptc_t *, int)
int ResourceRelease(ResourceHandle_t, uintp, ResourceLeakTrackingGroup_t)
int _V_strncmp(const char *, const char *, int)
int16 CGraphMixBuffers::GetOutputBuffer()
int8 CFieldPathHuffmanEncoder::BuildFixedTree_R(const CFieldPathHuffmanEncoder::INode *)
invalid stack
invalid_bone
invalid_hitbox
invalid_vsnd
invert
invert_mH
invert_match
invert_scale
ional_veH
ioriH
iout < pptc->cout
is_eventH
is_underH
is_untimH
is_untimed
isheH
istance
istener_L
itchH
itch_offH
item.m_SoundParams.m_nQueuedGUID != INVALID_SOUND_GUID
itemKVString
itemName
itemPos
itemType
itemTypeName
itioH
ity_infoH
ity_worlH
ixgroup
ixgroupsH
ixlayer
ixlayer_H
k_float3H
kersH
key_groups
kffff.
l$hA)
lacementH
lapsed_tH
lection_H
leftH
left_front
left_front1
left_front2
left_rear
left_rear1
left_rear2
left_up
lement_cH
length
lerp_bounce
les_faciH
less_than
less_than_or_equal
level
libMilesX64.dylib
libsoundsystem.dylib
limit
limiterRatio
lin_noisH
linear
list.IsValidSource( voiceState.m_nFirstInput + 1 )
list.IsValidSource( voiceState.m_nFirstInput + unsigned int )
lliage_lH
loatH
localPlayer
locked
loffH
loff_curH
loff_vr
log10
long long	IcO
long long [9]}*H
long long int::* (1.0 = wet)
long long'E9~
long long/9=^
long long@ffff.
long long[A\A]A^A_]
lumeH
lume_posH
lusion_sH
lvl: %.2f 
m_Blobs.IsPeeked()
m_Count == 0
m_EditItems
m_EditorPreview
m_ElementCount == 0
m_Elements.IsValidIterator( it )
m_Elements.IsValidIterator( m_LastAlloc )
m_Elements.IsValidIterator( m_LastAlloc ) || m_NumElements == 0
m_FirstFree == InvalidIndex()
m_Free & bit
m_GameData
m_Head == InvalidIndex()
m_Head.value.pNode != End()
m_Head.value.pNode == m_Tail.value.pNode
m_Head.value.pNode->pNext == End()
m_Memory.IsIdxValid( Index )
m_Memory.IsIdxValid( Index ) && m_Memory.IsIdxValid( Index + nMaxSize - 1 )
m_Memory.IsIdxValid( Index ) && m_Memory.IsIdxValid( Index + size - 1 )
m_Memory.IsValidIterator( it )
m_Memory.IsValidIterator( m_LastAlloc ) || m_ElementCount == 0
m_MixCommands
m_NumElements == 0
m_OperatorsKV
m_PreviewInputs
m_PreviewTweak
m_Processors
m_Root == InvalidIndex()
m_SoundEvents
m_SoundName
m_SoundStacks
m_StackKV
m_StackName
m_Submixes
m_Tail == InvalidIndex()
m_TrackTable.IsValidHandle( nNewHandle )
m_bIsRecordingSoundEvents
m_bIsReference
m_blockSize < MAX_ADPCM_ENCODED_BLOCK_SIZE
m_controlInputs
m_controlPoints
m_curves
m_data.TellPut() + fieldData.GetAllocSize() < UINT16_MAX
m_deviceSpec.channels == 2
m_deviceSpec.freq == int(MIX_DEFAULT_SAMPLING_RATE)
m_entries.NumAllocated() >= nVoiceMixStateEntries
m_errorIndex>=0
m_flTimeSinceOutput > flBufferTime
m_fnChangeCallbacks.Count() == 0
m_graphData.m_pGraphDesc->m_nOutputChannelCount == nMixChannels
m_hCache != 0
m_iDataType == TYPE_NONE
m_index.Count() == m_sources.Count()
m_levelUpdates.Count() == 0
m_mixerData.m_indexState.m_nBufferSampleOffset == 0
m_mixerData.m_indexState.m_nPacketIndex == 0
m_mixerData.m_nSamplingRate == (uint)m_pStream->GetOutputRate()
m_nAllocSize == 0 || m_nAllocSize == nDataSize
m_nChannels <= 8
m_nChannels <= DSPCHANMAX
m_nChannels == 2
m_nDefaultDevice >= 0 && m_nDefaultDevice < m_list.Count()
m_nDelaySamples > 0
m_nFormat == AUDIO_FORMAT_8BIT_INT || m_nFormat == AUDIO_FORMAT_16BIT_INT
m_nFreeBufferCount < DECODE_BUFFER_COUNT
m_nGraphOutputChannels
m_nMixSampleSize == sizeof(short) * m_pFormat->wfx.nChannels
m_nOutputBufferStart >= 0
m_nRefCount
m_nRefCount == 0
m_nRefCount >= 0
m_nSampleSize == 16
m_nSubvoiceRefCount == 0
m_nameInputs
m_pContext
m_pCurrent
m_pCurrentPlayer && m_pCurrentPlayer->GetSequence()
m_pData != nullptr
m_pData == nullptr
m_pGraphDesc->m_submixList.IsValidIndex( nTrack )
m_pGraphDesc->m_submixList[nTrack].m_nChannels >= voiceState.m_nInputCount
m_pOuterTypeScope != NULL
m_pParent
m_pParent == this
m_pParent->m_fnCompletionCallback
m_pSchemaType != NULL
m_pSfx->IsCached()
m_pSfx->m_hCache != 0
m_pSfx->m_nRefCount == 0
m_pStack->IsValidIndex( nGotoOperatorIndex )
m_pStream
m_pTypeOf != NULL
m_table[nIndex].m_nLockCount == 0
m_table[nIndex].m_pObject
m_values
make_verH
make_vertical
mask_typH
mask_type
match_duH
match_duration_type
match_enH
match_entity
match_entity_index
match_evH
match_evL
match_event_duration
match_event_name
match_event_type
match_rules
match_soundevent
match_soundevent_substring
match_suH
match_substring
match_thH
match_this_event
mate_floH
math_accH
math_accumulate12_float
math_aniH
math_animate_float3
math_aveH
math_average8_float
math_calH
math_calc_directional_vec3
math_calc_doppler
math_calc_fixed_rotation
math_claH
math_clamp_float
math_curH
math_db_H
math_db_to_gain
math_delH
math_delta
math_delta_float3
math_filH
math_filter_float
math_floH
math_float3
math_funH
math_func_float
math_gaiH
math_gain_to_db
math_inrH
math_inrange_float
math_perH
math_perlin_noise
math_ranH
math_random_float
math_random_float3
math_randomize_float
math_remH
math_remap_float
math_rigH
math_right_angle_float3
math_speH
math_speakers
math_strH
math_velH
math_velocity
max_note
max_outpH
max_output
max_soundevents
max_velocity_db
measures
memberName.m_pString && memberName.m_pString[0] != '\0'
memhandle_t CSimpleDataCache<CAsyncWaveData, asyncwaveparams_t>::IndexToHandle(int) [CACHE_OBJECT = CAsyncWaveData, CREATE_PARAMS = asyncwaveparams_t]
mentH
ments_flH
mffff.
min_note
min_outpH
min_output
min_velocity_db
mit_max_H
mit_opvaH
mixDownRule
mixSetup.m_nMixBufferMax >= 8
mix_input
mix_max
mix_min
mixgroup
mixgroupH
mixgroupid < g_cgrouprules
mixgroupid >= 0 && mixgroupid < ARRAYSIZE(g_mapMixgroupidToGrouprulesid)
mixlayer
mixlayerH
mory_typH
movie_fixwave
movie_fixwave: File '%short' does not exist
mp_floatH
mpleH
ms Delay
ms Delay (tap 1)
ms Delay (tap 2)
ms Delay (tap 3)
ms delay max
ms delay min
ms of mod depth
msgType == SOSMSGQ_SOUND_FIELDS || msgType == SOSMSGQ_LIBRARY_FIELDS
music
mute: %.2f
nActiveIndex >= 0 && nActiveIndex < m_nCount
nAlignment >= 0 && nAlignment <= UINT16_MAX
nBaseDataSize < 0xFFFF
nBits <= nBytes*8
nBits == 16
nBytesToCopy + nBytesCopied <= nBufferSize
nChannelCount == 2
nChannels == 4
nChars <= MIN( V_strnlen(pValue, nChars) + 1, nChars )
nChars == V_strlen(m_pString)
nDataSize > 0
nFlags >= 0 && nFlags <= UINT8_MAX
nFreeBlockSize > 0
nGuid != INVALID_SOUNDEVENT_GUID
nIdx >= 0 && nIdx <= INT8_MAX
nIndex != -1
nIndex != pDisabledBlob->m_DisabledModeAllocations.InvalidIndex()
nIndex < KV3_CLUSTER_VALUE_COUNT
nIndex < MAX_VOICES
nIndex == -1 || nIndex == unsigned int + nCurrent
nIndex >= 0 && nIndex < nMemberCount
nInputChannels == 2
nInputChannels == 6
nMaxChars > 0
nMixLayerIndex != -1
nMixes == pMix->m_debugOutputs.Count()
nOffset + nNameLength <= (uint)m_Names.Count()
nOffset < Q_ARRAYSIZE( m_bufferSpace )
nOffset < m_nAllocationSize
nOutput < mixSetup.m_nMixBufferMax
nOutputChannelCount == 6 && nInputChannelCount == 6 && IsAligned16Bytes( pflChannel0 )
nOutputChannelCount == 8 && nInputChannelCount == 8 && IsAligned16Bytes( pflChannel0 )
nOutputChannelCount >= nInputChannelCount
nPreset != 0
nRead == nPeeked
nResourceType != RESOURCE_TYPE_NONE
nResourceType == DeduceResourceTypeFromResourceName( pReferencedResourceName )
nSampleFrac < ( 1ul << FIX_BITS )
nSampleRate == m_nSampleRate
nSamplesAvailable > 0
nSamplesNeeded <= nTempSampleCount
nSamplesNeeded >= 0
nSize != 0
nSpeakerConfig >= 0 && nSpeakerConfig < 8
nStart + nCount == m_nMixBuffersInUse
nSubmixChannelCount == nOutputChannels
nTotalEventFieldMem < 4095
nTotalOffset >= 0
nTotalSize >= 0
nTraversalOffset == 0
nTries < 10000000
n_db_losH
n_to_db
named
nc_fieldH
nc_trackH
ncieH
nd_gain_H
nd_gamesH
nd_gamevH
nd_mH
nd_musicH
nd_voip_H
ndenciesH
ndexH
ne_eH
ne_startH
ngleH
nishH
no stack mem
noise_tyH
noise_type
normalizH
normalize_spread
normalize_trig
not_elapH
not_equal
note out of sampler range
nstoppedH
nt_blockH
nt_contrH
nt_dormaH
nt_floatH
nt_get_iH
nt_groupH
nt_limitH
nt_name
nt_on_liH
nt_on_spH
nt_on_voH
nt_pauseH
nt_set_iH
nt_startH
nt_strinH
nt_vsnd
nter_posH
nterval_L
ntity_clH
ntity_inH
ntity_isH
nullfield
numbits >= 0 && numbits <= 32
numerator
nverH
oQ fA
o_scale
oat3H
oat3_cenH
oat3_endH
oat3_staH
obal_forH
occlusioH
occlusion_db_loss
ocitH
ock_max_H
oice_conH
olumH
on_finisH
onceH
ontents
onvaH
op_at_tiH
operator
operator delete(void*)
operator delete[](void*)
operator new(unsigned long)
operator new[](unsigned long)
operator_arg_field
operator_field_display
operator_field_display_bool
operator_field_display_decibel
operator_field_display_decibel_level
operator_field_display_distance
operator_field_display_entity_index
operator_field_display_event_type
operator_field_display_float
operator_field_display_float_atten
operator_field_display_float_positive
operator_field_display_int
operator_field_display_none
operator_field_display_token
operator_field_display_vsnd
operator_override
operator_stacks
operator_variables
opvar
opvar_geH
opvar_get_float
opvar_get_float3
opvar_get_info
opvar_get_random_array_index
opvar_get_string
opvar_get_vsnd
opvar_inH
opvar_increment_float
opvar_seH
opvar_set_float
opvar_set_float3
opvar_set_string
orwaH
os_mH
osition
osition_L
ost_elapH
oto_counH
ound_conH
ountH
oup_nameH
oup_resuH
out of voice sources, won'unsigned short lipsync %short
outpH
output
outputBuffer
outputSubmix
output_
output_0
output_0H
output_1
output_1H
output_2
output_2H
output_aH
output_above
output_angles
output_bH
output_below
output_dH
output_dependencies
output_distance
output_dsp
output_duration
output_eH
output_eL
output_elapsed_time
output_element_count
output_ent_dormant
output_entity_classname
output_entity_index
output_entity_is_player
output_event_finished
output_events_matching
output_fH
output_float
output_gH
output_goto_count
output_hH
output_host_elapsed_time
output_iH
output_iL
output_id_deleted
output_interval_elapsed
output_interval_not_elapsed
output_inverse
output_is_blocked
output_is_selected_by_local_player
output_lH
output_lL
output_last_note
output_level
output_listener_count
output_listener_forward
output_listener_front
output_listener_is_underwater
output_listener_left
output_listener_position
output_listener_up
output_mH
output_match_count
output_max_index
output_mixgroups
output_oH
output_oL
output_opvar_elements
output_opvar_exists
output_pH
output_pL
output_pos
output_pos_max
output_pos_min
output_position
output_position_x
output_position_y
output_position_z
output_rH
output_rear
output_result
output_sH
output_sL
output_snd_gain_convar
output_snd_gamesound_convar
output_snd_gamevoice_convar
output_snd_musicvolume_convar
output_snd_voip_convar
output_stop_elapsed_time
output_stopped
output_success
output_tL
output_time_to_next_syncpoint
output_time_to_start
output_uH
output_unstopped
output_vH
output_vL
output_velocity
output_velocity_vector
output_velocity_vector_x
output_velocity_vector_y
output_velocity_vector_z
output_velocity_xy
output_vgraph_finished
output_vgraph_playing
output_volume
output_vsnd_finished
output_vsnd_looping
output_vsnd_playing
output_x
output_xH
output_y
output_yH
output_z
output_zH
p RBp
p ^ATAp
p ^ATC^ATAp
p->pos <= p->D
pAmath_string
pAtomicType
pBlob
pCallback == NULL
pCurGroup
pCurTrackEvent
pCurrentKey
pData == m_pData
pData->m_nChannels < 3
pDataBuf
pDataType->m_nSOFDataType == int
pDevice->MixChannelCount() == (uint)m_pGraphDesc->GetOutputChannelCount()
pDiskDataClassBinding != NULL
pEndVolumes
pEvent
pEvent1 && pEvent2
pEventInfo->m_msgType == SOSMSGQ_START
pFieldData.GetBaseDataTypeDef()->m_nSOFDataType == SOFTYPE_BOOL
pFieldData.GetBaseDataTypeDef()->m_nSOFDataType == SOFTYPE_ENUM
pFieldData.GetBaseDataTypeDef()->m_nSOFDataType == SOFTYPE_FLOAT
pFieldData.GetBaseDataTypeDef()->m_nSOFDataType == SOFTYPE_FLOAT_3
pFieldData.GetBaseDataTypeDef()->m_nSOFDataType == SOFTYPE_FLOAT_8
pFieldData.GetBaseDataTypeDef()->m_nSOFDataType == SOFTYPE_FLOAT_MAX_SPEAKERS
pFieldData.GetBaseDataTypeDef()->m_nSOFDataType == SOFTYPE_STRING_HANDLE
pFieldData.GetBaseDataTypeDef()->m_nSOFDataType == SOFTYPE_TOKEN
pFieldData.GetBaseDataTypeDef()->m_nSOFDataType == SOFTYPE_UINT32
pFieldData.GetBaseDataTypeDef()->m_nSOFDataType == SOFTYPE_VSND
pFileSystem
pHeader->m_nHeaderVersion == RESOURCE_FILE_HEADER_VERSION
pInstance->m_pGraphDesc->m_nNameHashCode == nGraphName.GetHashCode()
pKV3 >= m_Values
pKV3DataBlock != NULL
pLastChild == NULL || pLastChild->m_pPeer == dat
pLastChild->m_pPeer == NULL
pLastChild->m_pPeer == dat
pMemory[int] == 0
pMessage->m_msgType == SOSMSGQ_LIBRARY_FIELDS
pMessage->m_msgType == SOSMSGQ_START || pMessage->m_msgType == SOSMSGQ_SOUND_FIELDS
pMeta
pMixer != nullptr
pMixer == pVoice->pMixer
pName
pNewArrangement
pObject
pObject != NULL
pOpFieldInfo
pOutError
pOutLoadedFormatName
pOutLoadedFormatUUID
pParamClass && pParamClass->GetClass()
pPool->m_SpaceUsed < 0xFFFF
pPrevClusterInFreeList != NULL
pProcDesc->m_nChannels == 2
pRefStack
pResult->State() == VISIT_INFO_STATE_COMPLETE
pSampler
pSchemaSystem != NULL
pSosEntryMatch->MustMatchEntIndex()
pSoundEvent
pSource->CanDelete()
pSrcStackMem && pDstStackMem
pStack
pStack && pStack->GetMemPtr()
pStack->GetMemPtr()
pStackMem
pStartEventInfo->m_fieldData.IsEmpty()
pSubkey != NULL
pSubkey->m_pPeer == NULL
pTrack
pVMix
pVoice == &channels[m_list[nActiveIndex]]
pVoice->m_nActiveIndex == 0
pVoice->m_nActiveIndex > 0
pVoice->sfx
pVoice->sfx->pSource
pVoiceGraph->m_pGraphDesc->m_nOutputChannelCount <= 2
pVoiceGraph->m_pMixFilter == nullptr
pWaveData
pXp8p
pXu*H
pXumH
p[A^]
p_maH
p_miH
pa->diffusion < ADSP_DIFFUSION_MAX
pa->ht < ADSP_HEIGHT_MAX
pa->len < ADSP_LENGTH_MAX
pa->reflectivity < ADSP_REFLECTIVITY_MAX
pa->size < ADSP_SIZE_MAX
pa->wid < ADSP_WIDTH_MAX
packets[ 0 ].m_nSampleCount > 0 && indexState.m_nBufferSampleOffset < packets[ 0 ].m_nSampleCount
parallel filters
paramName
parameter
params
params.m_pVMixVoice->flags.m_bHasVMix
pass_opvH
pass_opvar_args
pbuffer
perlin
phanH
playback_type
playvol
pnGuid
poinH
pos <= p0->D
positionH
pp    
ppler_faL
ppler_obH
pptc->iin < pptc->cin
preload_vsnds
preview.editor
preview.editor.000
preview.editor.001
priorityH
priority_override
processor
processor.setparameter
processor_type
processors
proom->vplayer.z <= ptrU->endpos.z
prule->szdir[0]
public
public.
public.%short
public.attack
public.end_point
public.pitch
public.release
public.sample
public.start_point
public.volume
pvar_eleH
pvar_exiH
qN8gtQ
r%ff.
r;ff.
r?fffff.
rFfffff.
rJfff.
r_start
r_water
rackH
radr://5614542
rage8_flH
random
random_exclusive
random_weighted
rangemenH
ratiH
ratio
ration_tH
rce_end_H
rce_posiH
rce_starH
read_maxL
read_minH
rec.pSource
rection
reference_operator
reference_stack
release
releaseTime
reserve_array
resource
resourceName
resourcesystem
riggH
right_down
right_front
right_front1
right_front2
right_rear
right_rear1
right_rear2
rityH
rld_posiH
rmsTime
rotationH
round
round_toH
round_to_int
rt_stackH
rvalH
rve_amouH
s8ff.
s8w&H
s_MilesRefCount > 0
s_blockeH
s_nConnectionCount > 0
s_nDLLIdentifier < 0
s_nDLLIdentifier >= 0
s_nRegistrationCount < ARRAYSIZE(s_pConnectionRegistration)
s_nResourceFCRegisteredCount > 0
s_pConfigRegistry->m_nCount >= 0 && s_pConfigRegistry->m_nCount < ARRAYSIZE(s_pConfigRegistry->m_pInfo)
s_selectH
sampler_H
scripts/arrangements.kv3
scripts/samplers.kv3
scripts/sequences.kv3
scripts/soundmixers.txt
sed_timeH
send%double
sendOperator
send_typH
send_type
sequence
sequenceH
sequence_index
sequence_name
sequencer_start
server_pH
server_sH
sest_poiH
shedH
sitiH
sition1
sition2
sition_0H
sition_1H
sition_2H
sition_3H
sition_4H
sition_5H
sition_6H
sition_7H
size < 1024 * 1024
size >= 0
size64 < INT_MAX
size64 <= INT_MAX
slerp
slerp_bounce
snd_async_flush
snd_async_showmem
snd_async_showmem_music
snd_async_showmem_summary
snd_async_spew_blocking
snd_async_stream_fail
snd_async_stream_spew
snd_autodetect_latency
snd_compare_KV_convert
snd_compare_soundevents
snd_delay_sound_shift
snd_disable_mixer_duck
snd_disable_mixer_solo
snd_duckerattacktime
snd_duckerreleasetime
snd_duckerthreshold
snd_ducktovolume
snd_dump_filepaths
snd_dump_filepaths: Wrote %short
snd_envelope_rate
snd_filter
snd_finiH
snd_front_headphone_position
snd_front_stereo_speaker_position
snd_front_surround_speaker_position
snd_gain
snd_gain_max
snd_gain_min
snd_gamevoicevolume
snd_gamevolume
snd_headphone_pan_exponent
snd_headphone_pan_radial_weight
snd_list
snd_list_soundevents
snd_list_soundevents_by_stack
snd_loopH
snd_max_same_sounds
snd_max_same_weapon_sounds
snd_mergemethod
snd_mix_async
snd_mix_minframetime
snd_mixahead
snd_mixer_master_dsp
snd_mixer_master_level
snd_musicvolume
snd_mute_losefocus
snd_occlusion_debug
snd_op_test_convar
snd_playH
snd_print_arrangements
snd_print_current_mixer_mixgroup
snd_print_samplers
snd_print_sequences
snd_print_soundevent
snd_print_soundevent %short
snd_rear_headphone_position
snd_rear_stereo_speaker_position
snd_rear_surround_speaker_position
snd_refdb
snd_refdist
snd_remove_all_soundevents
snd_remove_soundevent
snd_report_stop_sound
snd_report_verbose_error
snd_samplers_play_note
snd_samplers_stop_note
snd_sequence_set_track_bpm
snd_sequence_set_track_transpose
snd_sequence_start
snd_sequence_stop_track
snd_sequencer_show_events
snd_sequencer_show_quantize_queue
snd_sequencer_start <sequence> [<track>] [<sampler>] [<quantize value>] [<quantize type>] [<seek>] [<synctrack>] 
snd_setmixer
snd_setmixlayer
snd_showclassname
snd_showstart
snd_sos_default_update_stack
snd_sos_flush_operators
snd_sos_get_operator_field_info
snd_sos_list_operator_updates
snd_sos_opvar_debug
snd_sos_print_class_sizes
snd_sos_print_field_references
snd_sos_print_full_field_info
snd_sos_print_groups
snd_sos_print_operator_stack
snd_sos_print_operators
snd_sos_print_stack_exec_list
snd_sos_print_stack_list
snd_sos_print_strings
snd_sos_print_tool_properties
snd_sos_resolve_execute_operator
snd_sos_set_operator_field
snd_sos_set_operator_field_by_guid
snd_sos_show_block_debug
snd_sos_show_client_rcv
snd_sos_show_entry_match_free
snd_sos_show_groups_debug
snd_sos_show_groups_match_free
snd_sos_show_operator_event_and_stack
snd_sos_show_operator_event_filter
snd_sos_show_operator_field_filter
snd_sos_show_operator_init
snd_sos_show_operator_not_executing
snd_sos_show_operator_operator_filter
snd_sos_show_operator_parse
snd_sos_show_operator_pause_entry
snd_sos_show_operator_prestart
snd_sos_show_operator_shutdown
snd_sos_show_operator_start
snd_sos_show_operator_stop_entry
snd_sos_show_operator_updates
snd_sos_show_opvar_updates
snd_sos_show_opvar_updates_filter
snd_sos_show_queuetotrack
snd_sos_show_soundevent_param_overwrite
snd_sos_show_track_list
snd_sos_soundevent_filter
snd_sos_start_soundevent
snd_sos_stop_all_soundevents
snd_sos_stop_soundevent_guid
snd_sos_stop_soundevent_index
snd_sos_test_soundmessage
snd_sos_use_case_sensitive_soundevents
snd_soundmixer
snd_soundmixer_flush
snd_soundmixer_list_mix_groups
snd_soundmixer_list_mix_layers
snd_soundmixer_list_mixers
snd_soundmixer_set_trigger_factor
snd_soundmixer_setmixlayer_amount
snd_soundmixer_version
snd_stereo_speaker_pan_exponent
snd_stereo_speaker_pan_radial_weight
snd_store_filepaths
snd_surround_speaker_pan_exponent
snd_surround_speaker_pan_radial_weight
snd_toolvolume
snd_visualize
snd_vmix_show_input_updates
snd_voipvolume
sndplaydelay
solo: %.2f 
soloname
sosEntryMatch.MustMatchSoundeventHash()
sos_goto
sos_gotoH
sos_impoH
sos_import_stack
sound
sound/
sound_device_override
soundeveH
soundeveL
soundevent
soundevent_block
soundevent_block_test
soundevent_control
soundevent_data
soundevent_get_info
soundevent_group_info
soundevent_group_join
soundevent_group_opvars
soundevent_group_quit
soundevent_group_stop
soundevent_limiter
soundevent_name
soundevent_pause
soundevent_start
soundevents/soundevents_manifest.vrman
soundevents/soundevents_manifest_tools.vrman
soundinfo
soundlist
soundmixH
soundmixer_get_mixgroup
soundmixer_set_mixlayer
soundmixer_set_mixlayer_amount
soundmixer_set_trigger
sounds
sounds/
sounds/%s_%llu.vsnd
sounds/%short
sounds\
soundstacks/mixgraph.vmix
soundstacks/sosgroups.txt
soundstacks/sosstrings.txt
soundstacks/soundstacks_manifest.vrman
soundsystem
source.m_pPackets[nPacketIndex].m_pSamples != NULL
sparse_convolution
spawn_orH
spawn_orphans
speaker_config
speakersH
stackLevel >= 0 && stackLevel < m_errorIndex
stanH
stance_mL
stance_sH
stant_exH
stant_maH
stant_miH
start
startParams.initialStreamPosition == 0
startParams.m_nVMixName.IsValid()
startParams.m_pVMixVoice == nullptr
start_8tH
start_tiH
static CSchemaEnumBindingBase *CSchemaEnumBinding<SosEditItemType_t>::Get() [T = SosEditItemType_t]
static void CAsyncWaveData::AsyncCallback(const FileAsyncRequest_t &, int, FSAsyncStatus_t)
static void CGlobalConfigValueRegistry::AddToList(const char *, ConfigType_t, ConfigValueType_t, CConfigValueOptions &&, const void **)
static void CGlobalConfigValueRegistry::HookUpConfigValue(const char *, ConfigType_t, ConfigValueType_t, CConfigValueOptions &&, const void **)
static void ConVarRef::InitDeferredConVarRefs()
static void SelectedEditItemInfo_t::Schema_VerifyBindingIsRegistered()
static void SosEditItemInfo_t::Schema_VerifyBindingIsRegistered()
static void VSoundEventScript_t::Schema_VerifyBindingIsRegistered()
static void VSoundEvent_t::Schema_VerifyBindingIsRegistered()
static void VSoundStackScript_t::Schema_VerifyBindingIsRegistered()
static void VSoundStack_t::Schema_VerifyBindingIsRegistered()
std::terminate()
stener_fH
stener_iH
stener_lH
stener_pH
stener_uH
ster_volH
stop_oldH
stop_oldest
stop_type
stopped_H
stopped_includes_dependencies
stopsound
strCopy[ strCopy.Length() - 1 ] == '\__int128'
strCopy[0] == '\__int128'
string
string_token
strings
strnlen
submix_nH
submix_name
sync_track
t$0w)H
t$8[A\A^A_]
t$fff.
t$pw,H
t$xfA
t2fffff.
t5fffff.
t6ffffff.
t9IcG
tBfffff.
tKIcD$
tLA96txA
tLMc~
tMMcG
tMff.
tN~*C
tSff.
tVfff.
t_float
t_float3H
t_inH
t_parentH
t_randomH
t_stringH
t_value
t_vsH
ta_floatH
tackH
tancH
tant_dspH
tartH
tation_aH
tch12_flH
tch3_floH
tch_floaH
tch_speaH
tchiH
te_indexH
ter_floaH
tervH
tffff.
tialize_H
ticaH
time slice ms
tionH
tityH
tity_indH
tiveH
tjMcf
to_eH
to_gain
to_head
to_mH
to_operaH
top_elapH
toppH
total preset slots used: %double 
tqIc_
tqJ94
track
track_naH
track_name
track_quH
track_queue
track_stH
track_stop
tracks
trigger_H
try_counH
typeH
typeinfo for IStack_Annotation
typeinfo for std::bad_alloc
u%...#H
u)...'H
u+...)H
u0z.H
u4z2L
u:z8Hc
uAz?H
uEzCf
uGetResourceManifest
uJzHL
uKzIL
uLHcQ
uSzQH
uTzRH
uVzTf
u\zZL
ual_prioH
ucceH
uiKey != UnusedElementKey()
uint Resample16to32(float *, const short *, float, uint *)
uint( nType ) < g_nSosBaseDataTypesCount
uint32
uint32 CSchemaFieldIterator::GetFieldMemoryOffset() const
uint32 CUtlMemoryArena::Free(byte *)
uint64
umulate1H
und_undeH
undlevelH
unknown
unknown error
unsigned char[A\A]A^A_]
unsigned int CUtlBuffer::GetVarInt()
unsigned short	[A\A^A_]
unsigned short%ffff.
unsigned short&H9[8tUH
unsigned short&ff.
unsigned short&fffff.
unsigned short-L9`
unsigned short/ff.
unsigned short;Lcg
unsigned short?ffffff.
unsigned short[fff.
unsigned short\ffffff.
update_stack
uration
urce_posH
use_worlH
use_world_position
util_draH
util_draw_radius
util_eleH
util_elements_float3
util_floH
util_float_to_speakers
util_intH
util_interval_timer
util_nulH
util_pacH
util_pack_float3
util_posH
util_pos_vec8
util_priH
util_print_float
util_print_float3
util_print_string
util_print_vsnd
util_timH
util_timer
util_timer_ramp
vHct
valuH
value
vaudio_sampleformats_t CAudioMixerData::GetSampleFormat(int) const
ve_2d_4kH
vectH
vector_xH
vector_yH
vector_zH
velocity_zones
vent_finH
vents_maH
verse_diH
version
vgraph_nH
vgraph_name
virtual CAudioSourceCached::~CAudioSourceCached()
virtual CAudioSource_PlayerVoiceStream::~CAudioSource_PlayerVoiceStream()
virtual CVMixMixer::~CVMixMixer()
virtual bool CAudioMixerWave::IsReadyToMix()
virtual bool CAudioProcessor::SetControlParameter(CUtlStringToken, float)
virtual bool CBaseIntrospectedTypeManager::Init(IResourceSystemUtils *)
virtual bool CDefaultIntrospectedTypeManager<7738156623707665270, VSoundStackScript_t>::Init(IResourceSystemUtils *) [nResourceType = 7738156623707665270, TIntrospectedDiskData = VSoundStackScript_t]
virtual bool CDefaultIntrospectedTypeManager<8319404589508883318, VSoundEventScript_t>::Init(IResourceSystemUtils *) [nResourceType = 8319404589508883318, TIntrospectedDiskData = VSoundEventScript_t]
virtual bool CPresetDSPAudioProcessor::SetControlParameter(CUtlStringToken, float)
virtual bool CSosEdit::EditSetSoundEventFieldValue(const char *, const char *, const CUtlString &, short)
virtual bool CSoundOpSystem::Connect(CreateInterfaceFn)
virtual bool CSoundSamplers::NoteOn(HSAMPLERHASH, uint8, uint8, CEntityIndex, KeyValues3 *)
virtual bool IResourceTypeManager::IsStreamingDataAlreadyLoaded(ResourceHandle_t)
virtual const CAudioMixerData *CVMixMixer::GetMixerData()
virtual float CDynamicsAudioProcessor::GetControlParameter(CUtlStringToken, float)
virtual float CFilterAudioProcessor::GetControlParameter(CUtlStringToken, float)
virtual float CHRTFAudioProcessor::GetControlParameter(CUtlStringToken, float)
virtual int CAudioSourceMemWave::GetOutputData(void **, int, int, char *)
virtual int CSequenceArranger::PlayTrackStep(const char *, CEntityIndex, KeyValues3 *)
virtual int ConCommand::AutoCompleteSuggest(const char *, CUtlVector<CUtlString> &)
virtual int IResourceTypeManager::GetNonStreamingDataLoadSize() const
virtual uint CAudioMixerWaveADPCM::GetDecodedData(void *, uint)
virtual uint CAudioSourceMemWave::ZeroCrossingAfter(uint)
virtual void *CAtomicManipulator<CResourceArray<VSoundEvent_t> >::Allocate() [T = CResourceArray<VSoundEvent_t>]
virtual void *CAtomicManipulator<CResourceArray<VSoundEvent_t> >::AllocateAndCopy(const void *) [T = CResourceArray<VSoundEvent_t>]
virtual void *CAtomicManipulator<CResourceArray<VSoundStack_t> >::Allocate() [T = CResourceArray<VSoundStack_t>]
virtual void *CAtomicManipulator<CResourceArray<VSoundStack_t> >::AllocateAndCopy(const void *) [T = CResourceArray<VSoundStack_t>]
virtual void *CResourceAllocatorUtils::AssumeControl(const void *)
virtual void CAtomicManipulator<CResourceArray<VSoundEvent_t> >::Copy(void *, const void *) [T = CResourceArray<VSoundEvent_t>]
virtual void CAtomicManipulator<CResourceArray<VSoundEvent_t> >::Deallocate(void *) [T = CResourceArray<VSoundEvent_t>]
virtual void CAtomicManipulator<CResourceArray<VSoundStack_t> >::Copy(void *, const void *) [T = CResourceArray<VSoundStack_t>]
virtual void CAtomicManipulator<CResourceArray<VSoundStack_t> >::Deallocate(void *) [T = CResourceArray<VSoundStack_t>]
virtual void CAudioCaptureDevice::OutputBuffer(int, CAudioMixBuffer *)
virtual void CAudioMixerWave::SetSampleStart(int)
virtual void CAudioMixerWaveMP3::OnCachedDataAvailable()
virtual void CAudioMixerWaveMP3::UpdateMixerState(audio_source_indexstate_t &)
virtual void CAudioProcessor::GenerateSideChain(CAudioMixBuffer *, int)
virtual void CAudioSourceMemWave::UpdateMixerData(const audio_source_indexstate_t &, CAudioMixerData *)
virtual void CBaseIntrospectedTypeManager::AllocateResource(ResourceHandle_t, ResourceId_t, const ResourceFileHeader_t *, IRD_RegisterResourceDataUtils *)
virtual void CDynamicsAudioProcessor::UpdateFromProcessorDescription(const vmix_processor_desc_t &)
virtual void CExtrefTraversal::VisitRelevantField(void *, CSchemaType *, FieldIntrospectionHandle_t)
virtual void CHRTFAudioProcessor::Process(CAudioMixBuffer *, CAudioMixBuffer *, int, dspglobalvars_t *)
virtual void CHRTFAudioProcessor::ProcessSingleChannel(const CAudioMixBuffer &, CAudioMixBuffer *, int)
virtual void CKV3ResourceTypeManager<2020175222>::AllocateResource(ResourceHandle_t, ResourceId_t, const ResourceFileHeader_t *, IRD_RegisterResourceDataUtils *) [nResourceType = 2020175222]
virtual void CPresetDSPAudioProcessor::Process(CAudioMixBuffer *, CAudioMixBuffer *, int, dspglobalvars_t *)
virtual void CPresetDSPAudioProcessor::ProcessSingleChannel(const CAudioMixBuffer &, CAudioMixBuffer *, int)
virtual void CResourceReferenceFixupTraversal::HandleExtref(ResourceType_t, CResourceExtReferenceBase *, FieldIntrospectionHandle_t)
virtual void CSequenceArranger::LoadArrangements()
virtual void CSequenceArranger::StartArrangement(HSOUNDSEQUENCERHASH)
virtual void CSosEdit::EditAddSoundEventField(const char *, const char *, short)
virtual void CSosEdit::EditAddSoundEventStackParam(const char *, const char *)
virtual void CSosEdit::EditGetDomainAttrInfo(const char *, HSOSLIBSTACKHASH, int, PropEdAttributeInfo_t *, SOFieldDataType_t &)
virtual void CSosEdit::EditListSoundEventStackParams(const char *, CUtlVector<CUtlString> &)
virtual void CSosEdit::EditRemoveSoundEventField(const char *, const char *)
virtual void CSosEdit::EditRemoveSoundEventStackParam(const char *, const char *)
virtual void CSosEdit::EditSetSoundEventStackParam(const char *, const char *, const CUtlString &, short)
virtual void CSosOperatorBlockEvents::Execute(void *, CSosOperatorStack *, int) const
virtual void CSosOperatorEntityInfo::Execute(void *, CSosOperatorStack *, int) const
virtual void CSosOperatorStopSoundEvents::Execute(void *, CSosOperatorStack *, int) const
virtual void CSoundEventManager::CompareSoundEvents(const char *, const char *)
virtual void CSoundSequencer::LoadSequences()
virtual void CSoundSystem::InitSoundSystem(PlatWindow_t, ISoundSystemServices *)
virtual void CSoundSystem::PreloadSoundEvent(CSoundEvent *)
virtual void CSoundSystem::RecordStartSoundEvent(SoundGuid_t, const StartSoundParams_t &, FileNameHandle_t, float)
virtual void CSoundSystem::RecordStopSoundEvent(SoundGuid_t, FileNameHandle_t, float)
virtual void ConCommand::Dispatch(const CCommandContext &, const CCommand &)
virtual void ConCommandBase::Create(const char *, const char *, int64)
virtual void ConVar::ChangeStringValue(const char *, float)
virtual void ConVar::Create(const char *, const char *, int64, const char *, bool, float, bool, float, FnChangeCallback_t)
virtual void ConVar::InternalSetFloatValue(float)
virtual void ConVar::InternalSetIntValue(int)
virtual void ConVar::InternalSetValue(const char *)
virtual void IResourceTypeManager::LoadStreamingData(ResourceHandle_t, IResourceSystemUtils *)
vmixE1
vmix_mixH
vmix_mixgraph_input
vmix_mixgraph_send
vmix_start_vmix_8track has empty vsnd string
vmix_start_vsnd: %short Voice count >= MAX_VOICES, aborting starting vsnd %short
vmix_voiH
vmix_voicegraph_input
vmix_voicegraph_start_8track
vmix_vsnH
vmix_vsnd_info
vmix_vsnd_start
vmix_vsnd_start has empty vsnd string
voiceList
voice_fadeouttime
voice_initial_buffer_ms
voice_loopback
voice_min_buffer_ms
voice_minimum_gain
voice_scale
voice_stall_ms
voice_steal
voice_threshold
voice_threshold_delay
void *CSfxTable::GetDataPointer()
void *CUtlMemoryPoolBase::Alloc()
void ADSP_GetSize(adsp_auto_params_t *)
void ASISTRUCT::Seek(int)
void CActiveVoices::Add(channel_t *)
void CActiveVoices::Remove(channel_t *)
void CAsyncWavDataCache::SpewMemoryUsage(CAsyncWavDataCache::MemoryUsageType)
void CAsyncWaveData::StartAsyncLoading(const asyncwaveparams_t &)
void CAudioMixCommandList::AccumulateMultichannel(uint16, int, uint16, int, float)
void CAudioMixDescription::FreeMixBuffer(uint16, uint)
void CAudioMixerEncoded::FreeBuffer(char *)
void CAudioMixerWave::AddDelaySamplesToPacket()
void CAudioOutputStream::BuildMixBufferForChannel(CAudioMixBuffer *, audio_source_indexstate_t &, CCircularSampleBuffer *)
void CAudioProcessor::ApplyProcessor(CAudioMixBuffer *, CAudioMixBuffer *, int)
void CAudioSource_PlayerVoiceStream::AppendData(int, const void *, int)
void CAudioSource_PlayerVoiceStream::SetEntityIndex(CEntityIndex)
void CBaseIntrospectedTypeManager::SetDiskDataBinding(const CSchemaClassBindingBase *)
void CBitVecT<CFixedBitVecBase<64> >::Clear(int) [BASE_OPS = CFixedBitVecBase<64>]
void CBitVecT<CFixedBitVecBase<64> >::Set(int) [BASE_OPS = CFixedBitVecBase<64>]
void CByteswap::SwapBufferToTargetEndian(T *, T *, int) [T = unsigned int]
void CCircularBuffer::SetSize(int)
void CFilterAudioProcessor::InitFilter()
void CKV3FormatManager::RegisterFormatConversion(const KV3ID_t &, const KV3ID_t &, ConversionFn_t)
void CKeyValues3Cluster::Free(KeyValues3 *)
void CKeyValues3Context::FreeKV_Internal(KeyValues3 *)
void CKeyValues3Table::Remove(KeyValues3 *, int)
void CKeyValuesErrorStack::Pop()
void CKeyValuesErrorStack::Reset(int, HKeySymbol)
void CKeyValuesTokenReader::SeekBackOneToken()
void CKeyValues_Data::Internal_ClearData()
void CKeyValues_Data::Internal_CopyData(const CKeyValues_Data &)
void CMainAudioGraph::BuildGraphVMix(CAudioMixDescription &, CMixVoiceList &)
void CMainAudioGraph::MixAndOutput(IAudioDevice2 *, CVoiceList &)
void CMainAudioGraph::OutputDebugInfo(CAudioMixResults *)
void CMixVoiceList::EndMixing(CAudioMixResults *, const CVoiceSendList &)
void CNameList::SetName(int, const char *)
void COrderedConstructor_Create<COrderedInitShutdownRefWrapper<&EarlyInit_Common>, CResolveOrderedFunc<COrderedInitShutdownRefWrapper<&EarlyInit_Common>, &_ORDERED_INIT_SHUTDOWN_WRAPPER_RESOLVEFUNC>, false>::AddRef(bool) [T = COrderedInitShutdownRefWrapper<&EarlyInit_Common>, RESOLVECLASS = CResolveOrderedFunc<COrderedInitShutdownRefWrapper<&EarlyInit_Common>, &_ORDERED_INIT_SHUTDOWN_WRAPPER_RESOLVEFUNC>, bCONSTRUCT_ON_FIRST_USE = false]
void COrderedConstructor_DependencyManagement<COrderedInitShutdownRefWrapper<&EarlyInit_Common> >::InternalLock(bool) [T = COrderedInitShutdownRefWrapper<&EarlyInit_Common>]
void COrderedConstructor_DependencyManagement<COrderedInitShutdownRefWrapper<&EarlyInit_Common> >::Release() [T = COrderedInitShutdownRefWrapper<&EarlyInit_Common>]
void CPresetDSPAudioProcessor::SwitchToPreset(int)
void CQueuedVSoundLoader::ProcessCompletedItems()
void CQueuedVSoundLoader::Update()
void CSchemaClassBindingBase::RegBase(ISchemaSystem *, const char *, const char *, CSchemaClassInfo *, const char *) [I = int]
void CSchemaClassInfo::CompleteInitialization(const CSchemaClassBindingBase *)
void CSchemaClassInfo::CompleteInitializationInternal(CSchemaType *, const CSchemaClassBindingBase *)
void CSchemaFieldIterator::Advance()
void CSchemaFieldIterator::Reset()
void CSequenceTrack::Start(HSAMPLERHASH, float, int, float)
void CSequenceTrack::Update(CSequenceTrack *)
void CSfxTable::CacheReload()
void CSfxTable::LockCache()
void CSfxTable::ReleaseRef()
void CSfxTable::UnlockCache()
void CSosEntryMatchList::Update()
void CSosEntryMatchList::UpdateSoundEventViewer()
void CSosFieldData::CopyData(const SosFieldValueMem_t *, uint)
void CSosFieldDataBool::Init()
void CSosFieldDataFloat2::Init()
void CSosFieldDataFloat3::Init()
void CSosFieldDataFloat4::Init()
void CSosFieldDataFloat6::Init()
void CSosFieldDataFloat::Init()
void CSosFieldDataFloatMaxSpeakers::Init()
void CSosFieldDataInt::Init()
void CSosFieldDataString::Init()
void CSosFieldDataToken::Init()
void CSosFieldDataUInt64::Init()
void CSosFieldDataVsnd::Init()
void CSosOperatorStack::CopyMemPool(CSosOperatorStack *, int)
void CSosOperatorStack::Execute()
void CSosOperatorStack::ImportMembers(CSosOperatorStack *, int, bool, const char *, int)
void CSosOperatorStack::ParseKV(KeyValues *)
void CSosOperatorStack::ReferenceCopyMemPool(CSosOperatorStack *)
void CSosOperatorStack::ReferenceMembers(CSosOperatorStack *)
void CSosOperatorStack::ReferenceStack(CSosOperatorStack *)
void CSosOperatorStack::ResolveConnections(int, void *)
void CSosOperatorStackCollection::RemoveStack(const char *)
void CSosOperatorSystem::HandleSetLibStackFieldsMessageQueue()
void CSosOperatorSystem::HandleSetSoundEventFieldsMessageQueue(CSosMessageQueue<SoundEventGuid_t> &, SoundEventGuid_t, CSosOperatorStack *)
void CSosOperatorSystem::HandleStartSoundEventMessageQueue()
void CSosOperatorSystem::OverwriteOpVarsParseKV(KeyValues *, const char *, const char *, CSosOperatorStack *)
void CSosOperatorSystem::SetLibraryStackFields(HSOSLIBSTACKHASH, const void *, int)
void CSosOperatorSystem::SetSoundEventField(SoundEventGuid_t, HSOSOPFIELDHASH, const CSosFieldData &, int)
void CSosOperatorSystem::SetSoundEventFields(SoundEventGuid_t, const void *, int)
void CSosPackedFieldData::AddOrReplace(HSOSOPFIELDHASH, const CSosFieldData &, short)
void CSosStackExecutionList::ClearDependencies()
void CSosTrackSystem::StopTrack(const char *, bool)
void CSoundEventFieldsInfo::AddEventFieldElement(HSOSOPFIELDHASH, int)
void CSoundEventFieldsInfo::RemoveEventField(HSOSOPFIELDHASH)
void CSoundEventFieldsInfo::RemoveEventFieldElement(HSOSOPFIELDHASH, int)
void CSoundEventFieldsInfo::SetEventFieldData(CSosOperatorStack *, HSOSOPFIELDHASH, void *)
void CSoundEventFieldsInfo::SetEventFieldElementCount(HSOSOPFIELDHASH, int)
void CSoundEventFieldsInfo::SwapEventFieldElements(HSOSOPFIELDHASH, int, int)
void CSoundSamplers::LoadSamplers()
void CStrongHandle<InfoForResourceTypeCVMixListResource>::Shutdown() [TResourceInfoData = InfoForResourceTypeCVMixListResource]
void CStrongHandle<InfoForResourceTypeVSound_t>::Shutdown() [TResourceInfoData = InfoForResourceTypeVSound_t]
void CStrongHandle<ResourceBindingVoid_t>::Shutdown() [TResourceInfoData = ResourceBindingVoid_t]
void CTSFastPushQueue_Base<CUtlMemoryPoolBase::CBlob, CUtlMemoryPoolBase::CBlob, CUtlMemoryPoolBase::CBlob, &CUtlMemoryPoolBase::CBlob::m_pNext>::Push(T *) [T = CUtlMemoryPoolBase::CBlob, POINTER_TYPE = CUtlMemoryPoolBase::CBlob, CONTAINER_TYPE = CUtlMemoryPoolBase::CBlob, LINKED_LIST_PTR = &CUtlMemoryPoolBase::CBlob::m_pNext]
void CTSFastPushQueue_Base<CUtlMemoryPoolBase::FreeList_t, CUtlMemoryPoolBase::FreeList_t, CUtlMemoryPoolBase::FreeList_t, &CUtlMemoryPoolBase::FreeList_t::pNext>::Push(T *) [T = CUtlMemoryPoolBase::FreeList_t, POINTER_TYPE = CUtlMemoryPoolBase::FreeList_t, CONTAINER_TYPE = CUtlMemoryPoolBase::FreeList_t, LINKED_LIST_PTR = &CUtlMemoryPoolBase::FreeList_t::pNext]
void CTSQueue<CAsyncWaveData *, false>::Purge() [T = CAsyncWaveData *, bTestOptimizer = false]
void CTemplateListDSP::PSET_FreeAll()
void CUtlBuffer::AddNullTermination()
void CUtlBuffer::AssumeMemory(void *, int, int, int)
void CUtlBuffer::GetLine(char *, int)
void CUtlBuffer::GetString(char *, int)
void CUtlBuffer::Put(const void *, int)
void CUtlBuffer::SetExternalBuffer(void *, int, int, int)
void CUtlBuffer::VaPrintf(const char *, __va_list_tag *)
void CUtlLeanVectorFixedGrowableBase<CSosPackedFieldData::Entry_t, 3, short>::EnsureCapacity(int, bool) [T = CSosPackedFieldData::Entry_t, N = 3, I = short]
void CUtlLinkedList<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short>, unsigned short> >::Free(I) [T = CQueuedVSoundLoader::AsyncSoundQueue_t, S = unsigned short, ML = false, I = unsigned short, M = CUtlMemory<UtlLinkedListElem_t<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short>, unsigned short>]
void CUtlLinkedList<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short>, unsigned short> >::LinkBefore(I, I) [T = CQueuedVSoundLoader::AsyncSoundQueue_t, S = unsigned short, ML = false, I = unsigned short, M = CUtlMemory<UtlLinkedListElem_t<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short>, unsigned short>]
void CUtlLinkedList<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short>, unsigned short> >::RemoveAll() [T = CQueuedVSoundLoader::AsyncSoundQueue_t, S = unsigned short, ML = false, I = unsigned short, M = CUtlMemory<UtlLinkedListElem_t<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short>, unsigned short>]
void CUtlLinkedList<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short>, unsigned short> >::Unlink(I) [T = CQueuedVSoundLoader::AsyncSoundQueue_t, S = unsigned short, ML = false, I = unsigned short, M = CUtlMemory<UtlLinkedListElem_t<CQueuedVSoundLoader::AsyncSoundQueue_t, unsigned short>, unsigned short>]
void CUtlRBTree<CUtlMap<CSosDependent *, int, unsigned short, bool (*)(CSosDependent *const &, CSosDependent *const &)>::Node_t, unsigned short, CUtlMap<CSosDependent *, int, unsigned short, bool (*)(CSosDependent *const &, CSosDependent *const &)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSosDependent *, int, unsigned short, bool (*)(CSosDependent *const &, CSosDependent *const &)>::Node_t, unsigned short>, unsigned short> >::RemoveAll() [T = CUtlMap<CSosDependent *, int, unsigned short, bool (*)(CSosDependent *const &, CSosDependent *const &)>::Node_t, I = unsigned short, L = CUtlMap<CSosDependent *, int, unsigned short, bool (*)(CSosDependent *const &, CSosDependent *const &)>::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSosDependent *, int, unsigned short, bool (*)(CSosDependent *const &, CSosDependent *const &)>::Node_t, unsigned short>, unsigned short>]
void CUtlRBTree<CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, unsigned short, CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, unsigned short>, unsigned short> >::FreeNode(I) [T = CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, I = unsigned short, L = CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, unsigned short>, unsigned short>]
void CUtlRBTree<CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, unsigned short, CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, unsigned short>, unsigned short> >::RemoveAll() [T = CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, I = unsigned short, L = CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, unsigned short>, unsigned short>]
void CUtlRBTree<CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, unsigned short, CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, unsigned short>, unsigned short> >::RemoveAt(I) [T = CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, I = unsigned short, L = CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<SoundEventGuid_t, CSndMixGroupTrigger_t, unsigned short, CDefLess<SoundEventGuid_t> >::Node_t, unsigned short>, unsigned short>]
void CUtlRBTree<CUtlMap<const char *, CSosOperator *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int, CUtlMap<const char *, CSosOperator *, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, CSosOperator *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int> >::RemoveAll() [T = CUtlMap<const char *, CSosOperator *, int, bool (*)(const char *const &, const char *const &)>::Node_t, I = int, L = CUtlMap<const char *, CSosOperator *, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, CSosOperator *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int>]
void CUtlRBTree<CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int, CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int> >::FreeNode(I) [T = CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, I = int, L = CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int>]
void CUtlRBTree<CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int, CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int> >::RemoveAll() [T = CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, I = int, L = CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int>]
void CUtlRBTree<CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int, CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int> >::RemoveAt(I) [T = CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, I = int, L = CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, CSosOperatorStack *, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int>]
void CUtlRBTree<CUtlMap<const char *, int, int, bool (*)(const char *const &, const char *const &)>::Node_t, int, CUtlMap<const char *, int, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, int, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int> >::RemoveAll() [T = CUtlMap<const char *, int, int, bool (*)(const char *const &, const char *const &)>::Node_t, I = int, L = CUtlMap<const char *, int, int, bool (*)(const char *const &, const char *const &)>::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<const char *, int, int, bool (*)(const char *const &, const char *const &)>::Node_t, int>, int>]
void CUtlRBTree<CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short, CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short>, unsigned short> >::FreeNode(I) [T = CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, I = unsigned short, L = CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short>, unsigned short>]
void CUtlRBTree<CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short, CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short>, unsigned short> >::RemoveAll() [T = CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, I = unsigned short, L = CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short>, unsigned short>]
void CUtlRBTree<CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short, CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short>, unsigned short> >::RemoveAt(I) [T = CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, I = unsigned short, L = CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CSosOperatorStack *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short>, unsigned short>]
void CUtlRBTree<CUtlMap<unsigned int, SosOpFieldMapInfo_t *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short, CUtlMap<unsigned int, SosOpFieldMapInfo_t *, unsigned short, CDefLess<unsigned int> >::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, SosOpFieldMapInfo_t *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short>, unsigned short> >::RemoveAll() [T = CUtlMap<unsigned int, SosOpFieldMapInfo_t *, unsigned short, CDefLess<unsigned int> >::Node_t, I = unsigned short, L = CUtlMap<unsigned int, SosOpFieldMapInfo_t *, unsigned short, CDefLess<unsigned int> >::CKeyLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, SosOpFieldMapInfo_t *, unsigned short, CDefLess<unsigned int> >::Node_t, unsigned short>, unsigned short>]
void CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RemoveAll() [T = CUtlSymbolTable::CStringPoolIndex, I = unsigned short, L = CUtlSymbolTable::CLess, M = CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short>]
void CUtlRBTree<CUtlSymbolTableLargeBaseTreeEntry_t *, long long, CTreeEntryLess<CNonThreadsafeTree<false>, false>, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTableLargeBaseTreeEntry_t *, long long>, long long> >::RemoveAll() [T = CUtlSymbolTableLargeBaseTreeEntry_t *, I = long long, L = CTreeEntryLess<CNonThreadsafeTree<false>, false>, M = CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTableLargeBaseTreeEntry_t *, long long>, long long>]
void CUtlRBTree<unsigned int, unsigned short, bool (*)(const unsigned int &, const unsigned int &), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::RemoveAll() [T = unsigned int, I = unsigned short, L = bool (*)(const unsigned int &, const unsigned int &), M = CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short>]
void CUtlRBTree<void *, int, bool (*)(void *const &, void *const &), CUtlMemory<UtlRBTreeNode_t<void *, int>, int> >::FreeNode(I) [T = void *, I = int, L = bool (*)(void *const &, void *const &), M = CUtlMemory<UtlRBTreeNode_t<void *, int>, int>]
void CUtlRBTree<void *, int, bool (*)(void *const &, void *const &), CUtlMemory<UtlRBTreeNode_t<void *, int>, int> >::RemoveAll() [T = void *, I = int, L = bool (*)(void *const &, void *const &), M = CUtlMemory<UtlRBTreeNode_t<void *, int>, int>]
void CUtlRBTree<void *, int, bool (*)(void *const &, void *const &), CUtlMemory<UtlRBTreeNode_t<void *, int>, int> >::RemoveAt(I) [T = void *, I = int, L = bool (*)(void *const &, void *const &), M = CUtlMemory<UtlRBTreeNode_t<void *, int>, int>]
void CUtlRBTree<void *, int, bool (*)(void *const &, void *const &), CUtlMemory<UtlRBTreeNode_t<void *, int>, int> >::SetLessFunc(const LessFunc_t &) [T = void *, I = int, L = bool (*)(void *const &, void *const &), M = CUtlMemory<UtlRBTreeNode_t<void *, int>, int>]
void CUtlSortedStringTokenDictWithNames::AddListToTail(const char **, int)
void CUtlString::SetDirect(const char *, int)
void CVMixDescription::ParseCurves(const KeyValues3 *, const KeyValues3 *)
void CVMixInstance::AdvanceVMixVoice(channel_t *, CAudioMixDescription &, CMixVoiceList &)
void CVMixInstance::Mix2x1Submixes(uint16, int, CAudioMixDescription &, CGraphMixBuffers &, uint, uint, float, float)
void CVMixInstance::MixSubmixes(CAudioMixDescription &, CMixVoiceList &, CGraphMixBuffers &)
void CVMixInstance::MixTracks(CAudioMixDescription &, CMixVoiceList &, int, CGraphMixBuffers &, uint16)
void CVMixInstance::MixVMixVoice(channel_t *, CAudioMixDescription &, CMixVoiceList &, CVoiceOutputDescription &, uint16)
void CVMixInstance::RunMixCommands(CAudioMixDescription &, CMixVoiceList &, CGraphMixBuffers &, CVoiceOutputDescription *)
void CVMixInstance::SendVoiceToSubmix(CAudioMixDescription &, CGraphMixBuffers &, mixstateentry_t &, uint16, float *, float *, uint)
void CVMixInstance::SendVoiceToSubmixDirect(CAudioMixDescription &, CGraphMixBuffers &, mixstateentry_t &, uint16, float *, float *, uint)
void CVMixList::ParseKV3(const KeyValues3 *, int)
void CVMixMixer::StopVoice(CAudioMixer *)
void CVMixTypeManager::VMixTableInit(int)
void CallPostConnect()
void ConVar_Register(int64, IConCommandBaseAccessor *)
void ConVar_Unregister()
void ConnectInterfaces(CreateInterfaceFn *, int)
void ConvertFloat32Int16_Clamp_Interleave6(short *, int, int, float *, int, int)
void ConvertFloat32Int16_Clamp_Interleave8(short *, int, int, float *, int, int)
void ConvertFloat32Int16_Clamp_InterleaveStride(short *, int, int, float *, int, int)
void DAS_SetTraceHeight(das_room_t *, trace_t *, trace_t *)
void DSP_InitAll(const KeyValues3 *)
void DecrementRefMiles()
void DisconnectInterfaces()
void DisconnectTier2Libraries()
void KeyValues3::CopyFrom(const KeyValues3 *)
void KeyValues3::GetValueAsString(CUtlString *) const
void KeyValues::AddSubKey(KeyValues *)
void KeyValues::AddSubkeyUsingKnownLastChild(KeyValues *, KeyValues *)
void KeyValues::AppendIncludedKeys(CUtlVector<KeyValues *> &)
void KeyValues::MergeBaseKeys(CUtlVector<KeyValues *> &)
void KeyValues::ParseIncludedKeys(const char *, const char *, IBaseFileSystem *, const char *, CUtlVector<KeyValues *> &, GetSymbolProc_t)
void KeyValues::RecursiveLoadFromBuffer(CKeyValuesErrorStack *, const char *, CKeyValuesTokenReader &, GetSymbolProc_t)
void KeyValues::RecursiveMergeKeyValues(KeyValues *)
void MXR_GetMixGroupFromSoundsource(channel_t *)
void MXR_GetValuesFromMixGroupIndex(mixervalues_t *, int)
void MXR_GetVolFromMixGroup(channel_t *, mixervalues_t *, int *)
void MXR_GetVolFromMixGroup_src2(int *, mixervalues_t *)
void MathLib_Init()
void ProcessAudioMix(CAudioMixResults *, const CAudioMixState &, CAudioMixDescription &, dspglobalvars_t *)
void ReconnectInterface(CreateInterfaceFn, const char *, void **)
void RegisterInterface(CreateInterfaceFn, const char *, void **)
void SND_MouthUpdateAll()
void S_DumpFilePaths(const CCommandContext &, const CCommand &)
void S_FreeChannel(channel_t *, CAudioMixer *)
void S_Init( start )
void S_SetMixLayerTriggerFactor(int, int, float)
void S_StopAllSounds(bool)
void S_UpdateVoicesPerFrame(const CAudioState *)
void SchemaRecurseData(CCaller &, void *, const CSchemaType *, FieldIntrospectionHandle_t, bool) [CCaller = HandleCaller_t]
void SchemaRecurseData(CCaller &, void *, const CSchemaType *, FieldIntrospectionHandle_t, bool) [CCaller = TraverseCaller]
void ShutdownVOIP()
void SosOpFieldInfo_t::CopyFieldMem(SosOpFieldInfo_t *, SosStackBaseMem_t *, SosStackBaseMem_t *)
void SosOpFieldInfo_t::ValueToKV3(KeyValues3 *, char *) const
void UtlTokenizer_UnqescapeOrUnquoteString(const char *, const char *, bool, CUtlString *)
void WaveFixupTmpFile(const char *)
void audio_device_init_params_t::OverrideSpeakerConfig(int)
void bf_write::SetOverflowFlag()
void bf_write::StartWriting(void *, int, int, int)
void bf_write::WriteUBitLong(unsigned int, int, bool)
void std::__1::__sort<std::__1::__less<unsigned int, unsigned int>&, unsigned int*>(unsigned int*, unsigned int*, std::__1::__less<unsigned int, unsigned int>&)
void@wchar_t'H
vol: %.2f 
volume
volume_cH
vpcfA
vsndE1
vsnd_c
vsnd_files
vsndevts
vsndevtsI
vsndevtsL
vsndstck
vsndstckL
vtable for __cxxabiv1::__class_type_info
vtable for __cxxabiv1::__si_class_type_info
vtable for __cxxabiv1::__vmi_class_type_info
wAubD
wPHcG
w_radiusH
wait_forH
wait_for_track
wardH
wateH
wavedatacache->CheckHandle( m_pSfx->m_hCache )
wchar_t`wchar_t*H
weights_H
weights_field_name
x6E9l$X~/Ic
xD;5w
xD;=G
xD;=__float128
xFE9g@~@E9gT|:
xHHc{
xLA9_@~FA9_T|@
xXurH
x_eventsH
x_loop_cH
x_velociH
xfade
xgroups
xpKcD7
yfff.
zpHcJx
{0t2L
{@L97t	
{}[]=, 	
|"ff.
|$ Ic
|$0Ic
|$PD9
|$`Hc
|$hIc
|$xLc
|8@HcKDH
|FLcG
|ffffff.
}HA;EP}
}ffff.
~!E9~,|
~$IcF
~,fff.
~.ff.
~/fff.
~0Mce
~1ff.
~=ffff.
~@IcVTH)
~@L9?unsigned short
~CSosOperatorSystem: Deleting orphaned CSosOperatorStack pointer for %short via shutdown
~Tfffff.
~ffff.
~ffffff.
~hffff.
~n8fA

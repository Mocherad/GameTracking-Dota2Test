<!-- schema text {7e125a45-3d83-4043-b292-9e24f8ef27b4} generic {198980d8-3a93-4919-b4c6-dd1fb07a3a4b} -->
CHelpData CHelpData_0
{
	CHelpEntry[] m_Entries = 
	[
		CHelpEntry
		{
			string m_Id = "Element.CStateMachineAnimNode"
			string m_FriendlyName = "State Machine Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Graph node that uses states, transitions, and conditions to determine which child node should be used"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CStateMachineAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CSequenceAnimNode"
			string m_FriendlyName = "Keyframe Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Represents a single keyframed animation (Sequence) and is responsible for its basic playback as part of the graph.  \n\nResetting a Keyframed Anim Node will set its playback time (and current frame) back to zero.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the name of the selected sequence.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_sequenceName"
			string m_FriendlyName = "Sequence"
			string m_TooltipOverride = ""
			string m_HelpText = "The sequence that this node will play"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_playbackSpeed"
			string m_FriendlyName = "Playback Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "The speed scale at which the animation will be played.  eg: <br/>\n 1 : Normal Speed <br/>\n 2 : Twice normal speed <br/>\n 0 : No speed; freeze on the current frame <br/>\n-1 : Play backwards\n\nNote that this value also affects the value of the duration that this node returns to its parents.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_bLoop"
			string m_FriendlyName = "Loop"
			string m_TooltipOverride = ""
			string m_HelpText = "Whether or not the animation should loop"
		},
		CHelpEntry
		{
			string m_Id = "Element.CChoiceAnimNode"
			string m_FriendlyName = "Choice Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "This node randomly chooses one of its children to play"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CRootAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CCycleControlAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_choiceMethod"
			string m_FriendlyName = "Method"
			string m_TooltipOverride = ""
			string m_HelpText = "The logic used to pick a child node.  <br/>\n<b>-<em> WeightedRandom:</em></b> Randomly choose the next child based on their weighting.  Can pick the same child twice in a row. <br/>\n<b>- <em>WeightedRandomNoRepeat:</em></b> Same as WeightedRandom, but prevents the same child from being chosen twice in a row. <br/>\n- Iterate: The next selected child is the one that comes after the current one. <br/>\n<b>- <em>IterateRandom:</em></b> Randomly choose between the children that have not been played, and don\'t repeat any children until they\'ve all been played.  <br/>\n"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_choiceChangeMethod"
			string m_FriendlyName = "Change Selection"
			string m_TooltipOverride = ""
			string m_HelpText = "Determine when the node selects a new child: <br/>\n- <b>OnReset:</b> Only make a new choice when the node is reset by its parent <br/>\n- <b>OnCycleEnd:</b> Make a new selection when the current one has finished playing.  <br/>\n- <b>OnResetOrCycleEnd:</b> Make a new choice when the node is reset or when the current selecion\'s cycle ends"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_blendTime"
			string m_FriendlyName = "Blend Duration"
			string m_TooltipOverride = ""
			string m_HelpText = "When a new choice has been made and the node has not been reset, the node will blend from the old choice to the new one.  This is how long the node should take to perform that blend.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_bResetChosen"
			string m_FriendlyName = "Reset On Selection"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, the child nodes will be reset when they get selected"
		},
		CHelpEntry
		{
			string m_Id = "Element.CMoverAnimNode"
			string m_FriendlyName = "Mover Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Creates root motion procedurally"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bApplyMovement"
			string m_FriendlyName = "Generate Movement"
			string m_TooltipOverride = ""
			string m_HelpText = "Create root motion that matches the movement direction and speed input to the graph"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bOrientMovement"
			string m_FriendlyName = "Orient Movement"
			string m_TooltipOverride = ""
			string m_HelpText = "Add rotation root motion to turn the character to face the direction set in the \"Turn to Face\" property"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_facingTarget"
			string m_FriendlyName = "Face Direction"
			string m_TooltipOverride = ""
			string m_HelpText = "If the \"Turn to Face\" property is true, this is the direction that the character will turn towards.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bLimitTurnSpeed"
			string m_FriendlyName = "Limit Turn Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "If \"Orient Movement\" is true, this toggles whether or not rate of turn should be clamped"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_flMaxTurnSpeed"
			string m_FriendlyName = "Max Turn Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "If the rate of turn is clamped (ie: \"Limit Turn Speed\" is true), this is the speed (in degrees per second) that the turn rate will be clamped to.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bAdditive"
			string m_FriendlyName = "Additive"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, the root motion generated by this node will be added to the root motion produced by its children.  <br/>\n<br/>\nIf false, then the root motion from the children of this node will be ignored, and the root motion generated by this node will replace it.  \n"
		},
		CHelpEntry
		{
			string m_Id = "Element.CBlendAnimNode"
			string m_FriendlyName = "Blend 1D Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "A 1-Dimensional blend between a set of child nodes.  \n<br/>\n<br/>\nThe node is given an input parameter to track, and each node is given a value.  The node will then find the two children whose values the input parameter is between, and blend between them.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_blendValueSource"
			string m_FriendlyName = "Blend Source"
			string m_TooltipOverride = ""
			string m_HelpText = "The input source that is driving the blend"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_param"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If the Blend Source is set to \"Parameter\", this needs to be set to the parameter that should be used.  Note that only Float parameters are supported.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_bLoop"
			string m_FriendlyName = "Loop"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggle whether or not the playback of the child nodes should loop.\n<br/>\n<br/>\nNote that the Blend 1D node explicitly controls the playback of its children, so that it can ensure that their cycles always match, even if the animations are different lengths.  This means that the loop setting on the children of blend nodes is ignored, and only the loop setting on the Blend 1D node matters.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_bLockBlendOnReset"
			string m_FriendlyName = "Lock Blend on Reset"
			string m_TooltipOverride = ""
			string m_HelpText = "When false, the blend is refreshed every frame.\n<br/>\n<br/>\nWhen true, the blend is only refresh when the node is reset.  The cycle advances normally, however.  This is so that you can keep the blend value the same for the duration of the playback of an animation, even if the input value changes.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CRootAnimNode"
			string m_FriendlyName = "Final Pose"
			string m_TooltipOverride = ""
			string m_HelpText = "The top level (ie: right-most) node of the tree.  Each update of the graph, evaluation starts from here.  \n<br/>\n<br/>\nEach graph must have exactly one Final Pose node in order to work.  \n<br/>\n<br/>\n"
		},
		CHelpEntry
		{
			string m_Id = "Element.CAddAnimNode"
			string m_FriendlyName = "Additive Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Additively blend two child nodes together"
		},
		CHelpEntry
		{
			string m_Id = "Element.CAnimState"
			string m_FriendlyName = "State"
			string m_TooltipOverride = ""
			string m_HelpText = "A state in the state machine.  Each state corresponds to one child of this anim node in the graph"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of this state. "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_bIsStartState"
			string m_FriendlyName = "Start State"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggles whether this state should be the current state when the graph is reset.  Each state machine should have exactly one start state.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_bIsEndtState"
			string m_FriendlyName = "End State"
			string m_TooltipOverride = ""
			string m_HelpText = "Is a state is marked as an End State, and its child is \"finished\", then the state machine will tell its parent that it also is \"finished\".  State machines can have zero or more End States"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_bIsPassthrough"
			string m_FriendlyName = "Passthrough"
			string m_TooltipOverride = ""
			string m_HelpText = "Normally when a state becomes the current state, its exit transitions are not evaluated until the next time the graph is updated.  Setting a state as a Passthrough State will cause it to evaluate its exit transitions during the same update that it becomes the current state.  So its possible for the state become the current state, then pass control to another state in the same frame.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_bIsRootMotionExclusive"
			string m_FriendlyName = "Exclusive Root Motion"
			string m_TooltipOverride = ""
			string m_HelpText = "Normally, root motion and the animation itself is blended between the old state and the new state when a state transition occurs.  \n<br/>\n<br/>\nWhen this option is set and this state becomes the current state, only its root motion is used, and it is not blended with the root motion of the old state, but the animation is still blended"
		},
		CHelpEntry
		{
			string m_Id = "Element.CAnimStateTransition"
			string m_FriendlyName = "Transition"
			string m_TooltipOverride = ""
			string m_HelpText = "A transition between two states.  Defines what conditions need to be met in order for the transition to be taken, and how the old node should blend into the new node.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimStateTransition.m_blendDuration"
			string m_FriendlyName = "Blend Duration"
			string m_TooltipOverride = ""
			string m_HelpText = "How long the blend from the old state to the new state should take"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimStateTransition.m_bReset"
			string m_FriendlyName = "Reset Destination"
			string m_TooltipOverride = ""
			string m_HelpText = "When true, the child node connected to the destination state will be reset when this transition is taken.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimStateTransition.m_resetCycleOption"
			string m_FriendlyName = "Start Cycle At"
			string m_TooltipOverride = ""
			string m_HelpText = "Set the cycle that the destination state should be reset to. \n<UL>\n<LI> <b>Beginning</b> : Set the state\'s cycle to 0\n<LI> <b>SameAsSourceState</b> : Set the destination state\'s cycle to the source state\'s cycle\n<LI> <b>InverseSourceCycle</b> : Set the destination state\'s cycle to (1 - source state\'s cycle)\n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bTurnToFace"
			string m_FriendlyName = "Turn to Face"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggle whether or not the character\'s body should turn to face a direction"
		},
		CHelpEntry
		{
			string m_Id = "Element.CAimMatrixAnimNode"
			string m_FriendlyName = "Aim Matrix Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Treats each frame of a single animation as the pose for a direction, and will blend them to create a combined pose to \"aim\" the character in that given direction"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_sequenceName"
			string m_FriendlyName = "Sequence"
			string m_TooltipOverride = ""
			string m_HelpText = "The sequence containing the aim poses in each frame.  Assumes that the frames are set up like this:\n\n<OL>\n<LI> Bottom Left\n<LI> Bottom Center\n<LI> Bottom Right\n<LI> Middle Left\n<LI> Middle Center\n<LI> Middle Right\n<LI> Up Left\n<LI> Up Center\n<LI> Up Right\n<LI> Straight Up\n</OL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_fAngleIncrement"
			string m_FriendlyName = "Angle Increment"
			string m_TooltipOverride = ""
			string m_HelpText = "The angle difference between the center pose and the outer poses.  eg: if the Angle Increment is 45, then the right pose is assumed to point 45 degrees to the right, the up pose points 45 degrees up, etc."
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_targetDirection"
			string m_FriendlyName = "Target Direction"
			string m_TooltipOverride = ""
			string m_HelpText = "The input vector that is driving the blend.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_param"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Target Direction</b> is set to <em>Parameter</em>, this field is the anim parameter that is driving the blend.  Note that only Vector parameters are displayed as options"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_forwardDirection"
			string m_FriendlyName = "Forward Direction"
			string m_TooltipOverride = ""
			string m_HelpText = "The direction (in Model Space) that represents \'forward\' for the blend.  By default, Source2 assumes +X is forward"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_damping"
			string m_FriendlyName = "Damping"
			string m_TooltipOverride = ""
			string m_HelpText = "Settings for damping the motion of the blended aim over time"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_speedFunction"
			string m_FriendlyName = "Speed Function"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls how damped speed is adjusted based on how far the current value is from the target value.  \n\n<UL>\n<LI> <b>No Damping:</b> Damping is not applied.  \n<LI> <b>Constant:</b> The damping speed does not change with distance from the target value\n<LI> <b>Spring:</b> A critically damped spring is used to accelerate the current value toward the target value.  The farther the current value is from the target, the more the acceleration.  However the spring will not overshoot the target value.  \n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_fSpeedScale"
			string m_FriendlyName = "Speed Scale"
			string m_TooltipOverride = ""
			string m_HelpText = "Scales the speed of the damping, or in the case of the Spring <b>Speed Function</b> it controls the strength of the spring.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_bLimitSpeed"
			string m_FriendlyName = "Limit Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggle whether or not to clamp the damping speed"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_flMinSpeed"
			string m_FriendlyName = "Min Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Limit Speed </b>is set, this is the slowest speed that the dampened value can change at.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_flMaxSpeed"
			string m_FriendlyName = "Max Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Limit Speed </b>is set, this is the fastest speed that the dampened value can change at.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_damping"
			string m_FriendlyName = "Damping"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls how fast the character will turn when <b>Turn to Face</b> is true.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_flRootMotionBlend"
			string m_FriendlyName = "Root Motion Blend"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls how the root motion is blended between the two source animations.  A value of 0 means use only the motion from child1, a value of 1 means use only child2"
		},
		CHelpEntry
		{
			string m_Id = "Element.CDirectPlaybackAnimNode"
			string m_FriendlyName = "Direct Playback Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Allows game code to tell the graph the play a sequence at this point in the graph hierarchy.  This node is necessary in order to play scripted sequences.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CRootAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CStateMachineAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CCycleControlAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSubtractAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSpeedScaleAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoreoAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectPlaybackAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTwoBoneIKAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLeanMatrixAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_bSyncCycles"
			string m_FriendlyName = "Sync Cycles"
			string m_TooltipOverride = ""
			string m_HelpText = "Set this option to true to make all the blended animations have the same cycle.  The blend node will adjust the playback speed of its children so that they after each tick their cycles match.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_damping"
			string m_FriendlyName = "Damping"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls how the output of this node is blended over time"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_fMinSpeed"
			string m_FriendlyName = "Minimum Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "Enforce a minimum speed at which the current value should approach the target value.  Especially important for the Spring setting, as the speed gets very slow as it approaches its target value.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CCycleControlAnimNode"
			string m_FriendlyName = "Cycle Control"
			string m_TooltipOverride = ""
			string m_HelpText = "Allows the cycle of its child\'s animation to be set directly by a parameter"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CCycleControlAnimNode.m_param"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "The parameter to use to control the cycle of the child node.  Only support Float parameters"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_bResetBase"
			string m_FriendlyName = "Reset Base Child"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, then when this node receives a reset it will forward the reset on to its Base Child"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_bResetAdditive"
			string m_FriendlyName = "Reset Additive Child"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, then when this node receives a reset it will forward the reset on to its Additive Child"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSubtractAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSpeedScaleAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoreoAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectPlaybackAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTwoBoneIKAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLeanMatrixAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CSubtractAnimNode"
			string m_FriendlyName = "Subtract Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Subtract the current pose of one animation from another, and return the result"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSubtractAnimNode.m_bResetBase"
			string m_FriendlyName = "Reset Base Child"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, then when this node receives a reset it will forward the reset on to its Base Child"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSubtractAnimNode.m_bResetSubtract"
			string m_FriendlyName = "Reset Subtracted Child"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, then when this node receives a reset it will forward the reset on to its Subtracted Child"
		},
		CHelpEntry
		{
			string m_Id = "Element.CTurnHelperAnimNode"
			string m_FriendlyName = "Turn Helper Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Creates additional root motion so that turn animations can be used to turn arbitrary distances.  Eg: use a 90 degree turn anim to turn 87 degrees or 102 degrees\n\nIt does this by looking at the amount of rotation that happens over the length of the child to figure out what angle the character would face with the animation alone.  Then over the course of the animation it will add or remove rotation so that when the animation is done, its facing the desired direction.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_facingTarget"
			string m_FriendlyName = "Turn to Face"
			string m_TooltipOverride = ""
			string m_HelpText = "The direction that we want the character to face"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_turnStartTime"
			string m_FriendlyName = "Turn Start Time"
			string m_TooltipOverride = ""
			string m_HelpText = "The time (in seconds) at which this node should start applying the additional root rotation.  Try to time this with your animation to hide any foot sliding"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_turnDuration"
			string m_FriendlyName = "Turn Duration"
			string m_TooltipOverride = ""
			string m_HelpText = "How long (in seconds) after the start time that this node should take to apply its extra root rotation.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_bMatchChildDuration"
			string m_FriendlyName = "Match Child Duration"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, this setting will override the value set in <b>Turn Duration</b> and will instead use the duration of its child"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_bClampDurationToChild"
			string m_FriendlyName = "Clamp Turn to Child Duration"
			string m_TooltipOverride = ""
			string m_HelpText = "When true, this setting will clamp the Turn Duration so that the turn is finished by the time the child node has finished playing"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_bUseManualTurnOffset"
			string m_FriendlyName = "Use Manual Turn Offset"
			string m_TooltipOverride = ""
			string m_HelpText = "When turned off, this node will calculate the amount of rotation that its child node, and then procedurally generates the rest.\n\nWhen this option is on, the node will assume that the value of <b>Manual Turn Offset</b> is the amount of rotation of the child node, and will not calculate it.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_manualTurnOffset"
			string m_FriendlyName = "Manual Turn Offset"
			string m_TooltipOverride = ""
			string m_HelpText = "The amount of rotation that this node assumes the child nodes will provide"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_upDirection"
			string m_FriendlyName = "Up Direction"
			string m_TooltipOverride = ""
			string m_HelpText = "The up direction (in Model Space).  By default, Up in the Source2 engine is +Z"
		},
		CHelpEntry
		{
			string m_Id = "Element.CSpeedScaleAnimNode"
			string m_FriendlyName = "Speed Scale"
			string m_TooltipOverride = ""
			string m_HelpText = "Allows a parameter to directly control the playback speed of its child.  \n\nNote that playback speed is inherited: if a node tells its child to play at half speed, and that child node tells its child to play at half speed, then the last child will play at quarter speed.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSpeedScaleAnimNode.m_param"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "The parameter used to control the speed.  Only Float Parameters are supported.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_animNamePrefix"
			string m_FriendlyName = "Sequence Name Prefix"
			string m_TooltipOverride = ""
			string m_HelpText = "To avoid having to hook up 8 animations each time you use one of these nodes, you just need to give it the first part of the name of your animations, and it will append the suffixes to those names and load them. It looks for:\n\n*_n\n*_nw\n*_w\n*_sw\n*_s\n*_se\n*_e\n*_ne"
		},
		CHelpEntry
		{
			string m_Id = "Element.CDirectionalBlendAnimNode"
			string m_FriendlyName = "Directional Blend"
			string m_TooltipOverride = ""
			string m_HelpText = "Like a Blend 1D, but specially configured for blends based on direction.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_blendValueSource"
			string m_FriendlyName = "Blend Source"
			string m_TooltipOverride = ""
			string m_HelpText = "The value that controls the blend"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_param"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Blend Source</b> is set to \"Parameter\", then this field indicates which parameter to use.  Only supports Float Parameters"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_bLoop"
			string m_FriendlyName = "Loop"
			string m_TooltipOverride = ""
			string m_HelpText = "When true, the cycle of the blended animations will loop"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_bLockBlendOnReset"
			string m_FriendlyName = "Lock Blend on Reset"
			string m_TooltipOverride = ""
			string m_HelpText = "Setting this to true will cause the blend weights to only get recalculated when this node is reset"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_playbackSpeed"
			string m_FriendlyName = "Playback Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "The speed at which the animations should be played back.  ie: 1 is normal speed, 2 is twice normal speed.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_damping"
			string m_FriendlyName = "Damping"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls how the blend value can optionally be interpolated to the target value.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CWayPointHelperAnimNode"
			string m_FriendlyName = "WayPoint Helper"
			string m_TooltipOverride = ""
			string m_HelpText = "This node helps steer its animation so that it ends at a navigation waypoint"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_flStartCycle"
			string m_FriendlyName = "Start Cycle"
			string m_TooltipOverride = ""
			string m_HelpText = "The cycle when this node should start steering the character"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_flEndCycle"
			string m_FriendlyName = "End Cycle"
			string m_TooltipOverride = ""
			string m_HelpText = "The cycle at which this node should stop steering the character"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_bOnlyGoals"
			string m_FriendlyName = "Only align to Goals"
			string m_TooltipOverride = ""
			string m_HelpText = "Tells the node to only steer the character if the current waypoint is the goal of the current navigation path"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_bPreventOvershoot"
			string m_FriendlyName = "Prevent Overshoot"
			string m_TooltipOverride = ""
			string m_HelpText = "Allow steering to prevent the character from going past the waypoint"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_bPreventUndershoot"
			string m_FriendlyName = "Prevent Undershoot"
			string m_TooltipOverride = ""
			string m_HelpText = "Apply steering if the character\'s motion will not take them far enough to reach the waypoint"
		},
		CHelpEntry
		{
			string m_Id = "Element.CBoneMaskAnimNode"
			string m_FriendlyName = "Bone Mask"
			string m_TooltipOverride = ""
			string m_HelpText = "Creates a new pose by doing a per-bone blend of two base poses.  The per-bone weights are defined in the model editor"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_weightListName"
			string m_FriendlyName = "Bone Mask"
			string m_TooltipOverride = ""
			string m_HelpText = "Pick which set of per-bone weights to use to blend the two child poses together.  This list is from the list of bone masks that are created on the model"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_bResetChild1"
			string m_FriendlyName = "Reset Child1"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, then when this node receives a reset it will forward the reset on to Child1"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_bResetChild2"
			string m_FriendlyName = "Reset Child2"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, then when this node receives a reset it will forward the reset on to Child2"
		},
		CHelpEntry
		{
			string m_Id = "Element.CChoreoAnimNode"
			string m_FriendlyName = "Choreo"
			string m_TooltipOverride = ""
			string m_HelpText = "This node is repsonsible for responding to requests from FacePose to play choreo gestures and postures"
		},
		CHelpEntry
		{
			string m_Id = "Element.CTwoBoneIKAnimNode"
			string m_FriendlyName = "Two-Bone IK"
			string m_TooltipOverride = ""
			string m_HelpText = "Implements a simple solver for 2 bone (plus 1 end-effector bone) inverse kinematics.  The IK chains are defined in the model editor.  The targets for the IK chain are attachments (ie: offsets from other bones in the skeleton, also defined in the model editor).  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTwoBoneIKAnimNode.m_ikChainName"
			string m_FriendlyName = "IK Chain"
			string m_TooltipOverride = ""
			string m_HelpText = "The chain of bones to perform the IK solve on"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTwoBoneIKAnimNode.m_attachmentName"
			string m_FriendlyName = "Target Attachment"
			string m_TooltipOverride = ""
			string m_HelpText = "The Attachment that the end effector of the IK chain should be moved to.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTwoBoneIKAnimNode.m_fallbackHingeAxis"
			string m_FriendlyName = "Fallback Hinge Axis"
			string m_TooltipOverride = ""
			string m_HelpText = "When the initial pose of the bones in the IK chain has a bend in it, the IK solver will preserve that existing axis of rotation.  But when the bones start out perfectly straight the solver will use this vector as the axis of rotation.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTwoBoneIKAnimNode.m_bMatchTargetOrientation"
			string m_FriendlyName = "Match Target Orientation"
			string m_TooltipOverride = ""
			string m_HelpText = "When true, the end effector bone in the IK chain will be rotated to match the orientation of the target Attachment"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_timingBehavior"
			string m_FriendlyName = "Timing Control"
			string m_TooltipOverride = ""
			string m_HelpText = "Choose how the node handles interprets and manages the playback of its children, and how its presents it own timing to its parent.    \n\n<UL>\n<LI> <B>Use Child1:</B> Use the cycle and duration of Child1 as the cycle and duration of this node.  The child nodes are not synchronized.   \n<LI> <B>Use Child2:</B> Use the cycle and duration of Child2 as the cycle and duration of this node.  The child nodes are not synchronized.   \n<LI> <B>Synchronize Children:</B> The cycle of the child nodes are kept in sync, and the cycle and duration of this node is a blend of the values from both children \n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_flTimingBlend"
			string m_FriendlyName = "Timing Blend"
			string m_TooltipOverride = ""
			string m_HelpText = "When <b>Timing Control</b> is set to Synchronize Children, this value controls how the duration of the blended result.  A value of 0 means the duration of Child1 is used, 1 means the duration of Child2 is used.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSubtractAnimNode.m_timingBehavior"
			string m_FriendlyName = "Timing Control"
			string m_TooltipOverride = ""
			string m_HelpText = "Choose how the node handles interprets and manages the playback of its children, and how its presents it own timing to its parent.    \n\n<UL>\n<LI> <B>Use Child1:</B> Use the cycle and duration of Child1 as the cycle and duration of this node.  The child nodes are not synchronized.   \n<LI> <B>Use Child2:</B> Use the cycle and duration of Child2 as the cycle and duration of this node.  The child nodes are not synchronized.   \n<LI> <B>Synchronize Children:</B> The cycle of the child nodes are kept in sync, and the cycle and duration of this node is a blend of the values from both children \n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_timingBehavior"
			string m_FriendlyName = "Timing Control"
			string m_TooltipOverride = ""
			string m_HelpText = "Choose how the node handles interprets and manages the playback of its children, and how its presents it own timing to its parent.    \n\n<UL>\n<LI> <B>Use Child1:</B> Use the cycle and duration of Child1 as the cycle and duration of this node.  The child nodes are not synchronized.   \n<LI> <B>Use Child2:</B> Use the cycle and duration of Child2 as the cycle and duration of this node.  The child nodes are not synchronized.   \n<LI> <B>Synchronize Children:</B> The cycle of the child nodes are kept in sync, and the cycle and duration of this node is a blend of the values from both children \n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSubtractAnimNode.m_flTimingBlend"
			string m_FriendlyName = "Timing Blend"
			string m_TooltipOverride = ""
			string m_HelpText = "When <b>Timing Control</b> is set to Synchronize Children, this value controls how the duration of the blended result.  A value of 0 means the duration of Child1 is used, 1 means the duration of Child2 is used.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_flTimingBlend"
			string m_FriendlyName = "Timing Blend"
			string m_TooltipOverride = ""
			string m_HelpText = "When <b>Timing Control</b> is set to Synchronize Children, this value controls how the duration of the blended result.  A value of 0 means the duration of Child1 is used, 1 means the duration of Child2 is used.  "
		}
	]
}